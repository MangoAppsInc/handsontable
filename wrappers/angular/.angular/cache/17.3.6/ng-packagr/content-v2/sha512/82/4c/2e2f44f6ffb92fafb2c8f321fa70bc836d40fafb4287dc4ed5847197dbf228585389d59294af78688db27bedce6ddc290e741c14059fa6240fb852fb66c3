{"hash":"0f25befc14f3b59c4ec9a9d6e22b850f65ca2a08","fesm2022":[{"exports":["HOT_DESTROYED_WARNING","HotColumnComponent","HotSettingsResolver","HotTableComponent","HotTableModule","HotTableRegisterer"],"facadeModuleId":"/Users/marekmartuszewski/Sites/hot3/wrappers/angular/dist/hot-table/esm2022/handsontable-angular.mjs","isDynamicEntry":false,"isEntry":true,"isImplicitEntry":false,"moduleIds":["/Users/marekmartuszewski/Sites/hot3/wrappers/angular/dist/hot-table/esm2022/lib/hot-table-registerer.service.mjs","/Users/marekmartuszewski/Sites/hot3/wrappers/angular/dist/hot-table/esm2022/lib/hot-settings-resolver.service.mjs","/Users/marekmartuszewski/Sites/hot3/wrappers/angular/dist/hot-table/esm2022/lib/hot-table.component.mjs","/Users/marekmartuszewski/Sites/hot3/wrappers/angular/dist/hot-table/esm2022/lib/hot-column.component.mjs","/Users/marekmartuszewski/Sites/hot3/wrappers/angular/dist/hot-table/esm2022/lib/hot-table.module.mjs","/Users/marekmartuszewski/Sites/hot3/wrappers/angular/dist/hot-table/esm2022/public-api.mjs","/Users/marekmartuszewski/Sites/hot3/wrappers/angular/dist/hot-table/esm2022/handsontable-angular.mjs"],"name":"handsontable-angular","type":"chunk","dynamicImports":[],"fileName":"handsontable-angular.mjs","implicitlyLoadedBefore":[],"importedBindings":{"@angular/core":["*","Injectable","Component","ViewEncapsulation","ViewChild","Input","NgModule"],"handsontable/base":["default"]},"imports":["@angular/core","handsontable/base"],"modules":{"/Users/marekmartuszewski/Sites/hot3/wrappers/angular/dist/hot-table/esm2022/lib/hot-table-registerer.service.mjs":{"code":"const instances = new Map();\nconst HOT_DESTROYED_WARNING = 'The Handsontable instance bound to this component was destroyed and cannot be' +\n    ' used properly.';\nclass HotTableRegisterer {\n    getInstance(id) {\n        const hotInstance = instances.get(id);\n        if (hotInstance.isDestroyed) {\n            console.warn(HOT_DESTROYED_WARNING);\n            return null;\n        }\n        return hotInstance;\n    }\n    registerInstance(id, instance) {\n        return instances.set(id, instance);\n    }\n    removeInstance(id) {\n        return instances.delete(id);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotTableRegisterer, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotTableRegisterer });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotTableRegisterer, decorators: [{\n            type: Injectable\n        }] });","originalLength":3350,"removedExports":[],"renderedExports":["HOT_DESTROYED_WARNING","HotTableRegisterer"],"renderedLength":1048},"/Users/marekmartuszewski/Sites/hot3/wrappers/angular/dist/hot-table/esm2022/lib/hot-settings-resolver.service.mjs":{"code":"const AVAILABLE_OPTIONS = Object.keys(Handsontable.DefaultSettings);\nconst AVAILABLE_HOOKS = Handsontable.hooks.getRegistered();\nclass HotSettingsResolver {\n    mergeSettings(component) {\n        const isSettingsObject = 'settings' in component && (typeof component['settings'] === 'object');\n        const mergedSettings = isSettingsObject ? component['settings'] : {};\n        const options = AVAILABLE_HOOKS.concat(AVAILABLE_OPTIONS);\n        options.forEach(key => {\n            const isHook = AVAILABLE_HOOKS.indexOf(key) > -1;\n            let option;\n            if (isSettingsObject && isHook) {\n                option = component['settings'][key];\n            }\n            if (component[key] !== void 0) {\n                option = component[key];\n            }\n            if (option === void 0) {\n                return;\n            }\n            else if (('ngZone' in component) && (typeof option === 'function' && isHook)) {\n                mergedSettings[key] = function (...args) {\n                    return component.ngZone.run(() => option.apply(this, args));\n                };\n            }\n            else {\n                mergedSettings[key] = option;\n            }\n        });\n        return mergedSettings;\n    }\n    prepareChanges(changes) {\n        const result = {};\n        const parameters = Object.keys(changes);\n        parameters.forEach((param) => {\n            if (changes.hasOwnProperty(param)) {\n                result[param] = changes[param].currentValue;\n            }\n        });\n        return result;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotSettingsResolver, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotSettingsResolver });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotSettingsResolver, decorators: [{\n            type: Injectable\n        }] });","originalLength":7209,"removedExports":[],"renderedExports":["HotSettingsResolver"],"renderedLength":2028},"/Users/marekmartuszewski/Sites/hot3/wrappers/angular/dist/hot-table/esm2022/lib/hot-table.component.mjs":{"code":"class HotTableComponent {\n    _hotTableRegisterer;\n    _hotSettingsResolver;\n    ngZone;\n    container;\n    __hotInstance = null;\n    columnsComponents = [];\n    // component inputs\n    settings;\n    hotId = '';\n    // handsontable options\n    activeHeaderClassName;\n    allowEmpty;\n    allowHtml;\n    allowInsertColumn;\n    allowInsertRow;\n    allowInvalid;\n    allowRemoveColumn;\n    allowRemoveRow;\n    ariaTags;\n    autoColumnSize;\n    autoRowSize;\n    autoWrapCol;\n    autoWrapRow;\n    bindRowsWithHeaders;\n    cell;\n    cells;\n    checkedTemplate;\n    className;\n    colHeaders;\n    collapsibleColumns;\n    columnHeaderHeight;\n    columns;\n    columnSorting;\n    columnSummary;\n    colWidths;\n    commentedCellClassName;\n    comments;\n    contextMenu;\n    copyable;\n    copyPaste;\n    correctFormat;\n    currentColClassName;\n    currentHeaderClassName;\n    currentRowClassName;\n    customBorders;\n    data;\n    dataSchema;\n    dateFormat;\n    datePickerConfig;\n    defaultDate;\n    tabNavigation;\n    disableVisualSelection;\n    dragToScroll;\n    dropdownMenu;\n    editor;\n    enterBeginsEditing;\n    enterMoves;\n    fillHandle;\n    filter;\n    filteringCaseSensitive;\n    filters;\n    fixedColumnsLeft;\n    fixedColumnsStart;\n    fixedRowsBottom;\n    fixedRowsTop;\n    formulas;\n    fragmentSelection;\n    height;\n    hiddenColumns;\n    hiddenRows;\n    invalidCellClassName;\n    imeFastEdit;\n    label;\n    language;\n    layoutDirection;\n    licenseKey;\n    locale;\n    manualColumnFreeze;\n    manualColumnMove;\n    manualColumnResize;\n    manualRowMove;\n    manualRowResize;\n    maxCols;\n    maxRows;\n    mergeCells;\n    minCols;\n    minRows;\n    minSpareCols;\n    minSpareRows;\n    multiColumnSorting;\n    navigableHeaders;\n    nestedHeaders;\n    nestedRows;\n    noWordWrapClassName;\n    numericFormat;\n    observeDOMVisibility;\n    outsideClickDeselects;\n    persistentState;\n    placeholder;\n    placeholderCellClassName;\n    preventOverflow;\n    preventWheel;\n    readOnly;\n    readOnlyCellClassName;\n    renderAllColumns;\n    renderAllRows;\n    renderer;\n    rowHeaders;\n    rowHeaderWidth;\n    rowHeights;\n    search;\n    selectionMode;\n    selectOptions;\n    skipColumnOnPaste;\n    skipRowOnPaste;\n    sortByRelevance;\n    source;\n    startCols;\n    startRows;\n    stretchH;\n    strict;\n    tableClassName;\n    tabMoves;\n    title;\n    trimDropdown;\n    trimRows;\n    trimWhitespace;\n    type;\n    uncheckedTemplate;\n    undo;\n    validator;\n    viewportColumnRenderingOffset;\n    viewportRowRenderingOffset;\n    visibleRows;\n    width;\n    wordWrap;\n    // handsontable hooks\n    afterAddChild;\n    afterAutofill;\n    afterBeginEditing;\n    afterCellMetaReset;\n    afterChange;\n    afterChangesObserved;\n    afterColumnCollapse;\n    afterColumnExpand;\n    afterColumnFreeze;\n    afterColumnMove;\n    afterColumnResize;\n    afterColumnSequenceChange;\n    afterColumnSort;\n    afterColumnUnfreeze;\n    afterContextMenuDefaultOptions;\n    afterContextMenuHide;\n    afterContextMenuShow;\n    afterCopy;\n    afterCopyLimit;\n    afterCreateCol;\n    afterCreateRow;\n    afterCut;\n    afterDeselect;\n    afterDestroy;\n    afterDetachChild;\n    afterDocumentKeyDown;\n    afterDrawSelection;\n    afterDropdownMenuDefaultOptions;\n    afterDropdownMenuHide;\n    afterDropdownMenuShow;\n    afterFilter;\n    afterFormulasValuesUpdate;\n    afterGetCellMeta;\n    afterGetColHeader;\n    afterGetColumnHeaderRenderers;\n    afterGetRowHeader;\n    afterGetRowHeaderRenderers;\n    afterHideColumns;\n    afterHideRows;\n    afterInit;\n    afterLanguageChange;\n    afterListen;\n    afterLoadData;\n    afterMergeCells;\n    afterModifyTransformEnd;\n    afterModifyTransformFocus;\n    afterModifyTransformStart;\n    afterMomentumScroll;\n    afterNamedExpressionAdded;\n    afterNamedExpressionRemoved;\n    afterOnCellContextMenu;\n    afterOnCellCornerDblClick;\n    afterOnCellCornerMouseDown;\n    afterOnCellMouseDown;\n    afterOnCellMouseOut;\n    afterOnCellMouseOver;\n    afterOnCellMouseUp;\n    afterPaste;\n    afterPluginsInitialized;\n    afterRedo;\n    afterRedoStackChange;\n    afterRefreshDimensions;\n    afterRemoveCellMeta;\n    afterRemoveCol;\n    afterRemoveRow;\n    afterRender;\n    afterRenderer;\n    afterRowMove;\n    afterRowResize;\n    afterRowSequenceChange;\n    afterScrollHorizontally;\n    afterScrollVertically;\n    afterScroll;\n    afterSelectColumns;\n    afterSelection;\n    afterSelectionByProp;\n    afterSelectionEnd;\n    afterSelectionEndByProp;\n    afterSelectionFocusSet;\n    afterSelectRows;\n    afterSetCellMeta;\n    afterSetDataAtCell;\n    afterSetDataAtRowProp;\n    afterSetSourceDataAtCell;\n    afterSheetAdded;\n    afterSheetRenamed;\n    afterSheetRemoved;\n    afterTrimRow;\n    afterUndo;\n    afterUndoStackChange;\n    afterUnhideColumns;\n    afterUnhideRows;\n    afterUnlisten;\n    afterUnmergeCells;\n    afterUntrimRow;\n    afterUpdateData;\n    afterUpdateSettings;\n    afterValidate;\n    afterViewportColumnCalculatorOverride;\n    afterViewportRowCalculatorOverride;\n    afterViewRender;\n    beforeAddChild;\n    beforeAutofill;\n    beforeBeginEditing;\n    beforeCellAlignment;\n    beforeChange;\n    beforeChangeRender;\n    beforeColumnCollapse;\n    beforeColumnExpand;\n    beforeColumnFreeze;\n    beforeColumnMove;\n    beforeColumnResize;\n    beforeColumnSort;\n    beforeColumnWrap;\n    beforeColumnUnfreeze;\n    beforeContextMenuSetItems;\n    beforeContextMenuShow;\n    beforeCopy;\n    beforeCreateCol;\n    beforeCreateRow;\n    beforeCut;\n    beforeDetachChild;\n    beforeDrawBorders;\n    beforeDropdownMenuSetItems;\n    beforeDropdownMenuShow;\n    beforeFilter;\n    beforeGetCellMeta;\n    beforeHideColumns;\n    beforeHideRows;\n    beforeHighlightingColumnHeader;\n    beforeHighlightingRowHeader;\n    beforeInit;\n    beforeInitWalkontable;\n    beforeKeyDown;\n    beforeLanguageChange;\n    beforeLoadData;\n    beforeMergeCells;\n    beforeOnCellContextMenu;\n    beforeOnCellMouseDown;\n    beforeOnCellMouseOut;\n    beforeOnCellMouseOver;\n    beforeOnCellMouseUp;\n    beforePaste;\n    beforeRedo;\n    beforeRedoStackChange;\n    beforeRefreshDimensions;\n    beforeRemoveCellClassNames;\n    beforeRemoveCellMeta;\n    beforeRemoveCol;\n    beforeRemoveRow;\n    beforeRender;\n    beforeRenderer;\n    beforeRowMove;\n    beforeRowResize;\n    beforeRowWrap;\n    beforeSelectColumns;\n    beforeSelectionFocusSet;\n    beforeSelectionHighlightSet;\n    beforeSelectRows;\n    beforeSetCellMeta;\n    beforeSetRangeEnd;\n    beforeSetRangeStart;\n    beforeSetRangeStartOnly;\n    beforeStretchingColumnWidth;\n    beforeTouchScroll;\n    beforeTrimRow;\n    beforeUndo;\n    beforeUndoStackChange;\n    beforeUnhideColumns;\n    beforeUnhideRows;\n    beforeUnmergeCells;\n    beforeUntrimRow;\n    beforeUpdateData;\n    beforeValidate;\n    beforeValueRender;\n    beforeViewportScroll;\n    beforeViewportScrollHorizontally;\n    beforeViewportScrollVertically;\n    beforeViewRender;\n    construct;\n    init;\n    modifyAutoColumnSizeSeed;\n    modifyAutofillRange;\n    modifyColHeader;\n    modifyColumnHeaderHeight;\n    modifyColumnHeaderValue;\n    modifyColWidth;\n    modifyCopyableRange;\n    modifyFiltersMultiSelectValue;\n    modifyFocusedElement;\n    modifyData;\n    modifyFocusOnTabNavigation;\n    modifyGetCellCoords;\n    modifyRowData;\n    modifyRowHeader;\n    modifyRowHeaderWidth;\n    modifyRowHeight;\n    modifySourceData;\n    modifyTransformEnd;\n    modifyTransformFocus;\n    modifyTransformStart;\n    persistentStateLoad;\n    persistentStateReset;\n    persistentStateSave;\n    constructor(_hotTableRegisterer, _hotSettingsResolver, ngZone) {\n        this._hotTableRegisterer = _hotTableRegisterer;\n        this._hotSettingsResolver = _hotSettingsResolver;\n        this.ngZone = ngZone;\n    }\n    get hotInstance() {\n        if (!this.__hotInstance || (this.__hotInstance && !this.__hotInstance.isDestroyed)) {\n            // Will return the Handsontable instance or `null` if it's not yet been created.\n            return this.__hotInstance;\n        }\n        else {\n            this._hotTableRegisterer.removeInstance(this.hotId);\n            console.warn(HOT_DESTROYED_WARNING);\n            return null;\n        }\n    }\n    set hotInstance(hotInstance) {\n        this.__hotInstance = hotInstance;\n    }\n    ngAfterViewInit() {\n        const options = this._hotSettingsResolver.mergeSettings(this);\n        if (this.columnsComponents.length > 0) {\n            const columns = [];\n            this.columnsComponents.forEach((column) => {\n                columns.push(this._hotSettingsResolver.mergeSettings(column));\n            });\n            options['columns'] = columns;\n        }\n        this.ngZone.runOutsideAngular(() => {\n            this.hotInstance = new Handsontable.Core(this.container.nativeElement, options);\n            if (this.hotId) {\n                this._hotTableRegisterer.registerInstance(this.hotId, this.hotInstance);\n            }\n            // @ts-ignore\n            this.hotInstance.init();\n        });\n    }\n    ngOnChanges(changes) {\n        if (this.hotInstance === null) {\n            return;\n        }\n        const newOptions = this._hotSettingsResolver.prepareChanges(changes);\n        this.updateHotTable(newOptions);\n    }\n    ngOnDestroy() {\n        this.ngZone.runOutsideAngular(() => {\n            if (this.hotInstance) {\n                this.hotInstance.destroy();\n            }\n        });\n        if (this.hotId) {\n            this._hotTableRegisterer.removeInstance(this.hotId);\n        }\n    }\n    updateHotTable(newSettings) {\n        if (!this.hotInstance) {\n            return;\n        }\n        this.ngZone.runOutsideAngular(() => {\n            this.hotInstance.updateSettings(newSettings, false);\n        });\n    }\n    onAfterColumnsChange() {\n        if (this.columnsComponents === void 0) {\n            return;\n        }\n        if (this.columnsComponents.length > 0) {\n            const columns = [];\n            this.columnsComponents.forEach((column) => {\n                columns.push(this._hotSettingsResolver.mergeSettings(column));\n            });\n            const newOptions = {\n                columns: columns\n            };\n            this.updateHotTable(newOptions);\n        }\n    }\n    onAfterColumnsNumberChange() {\n        const columns = [];\n        if (this.columnsComponents.length > 0) {\n            this.columnsComponents.forEach((column) => {\n                columns.push(this._hotSettingsResolver.mergeSettings(column));\n            });\n        }\n        this.updateHotTable({ columns });\n    }\n    addColumn(column) {\n        this.columnsComponents.push(column);\n        this.onAfterColumnsNumberChange();\n    }\n    removeColumn(column) {\n        const index = this.columnsComponents.indexOf(column);\n        this.columnsComponents.splice(index, 1);\n        this.onAfterColumnsNumberChange();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotTableComponent, deps: [{ token: HotTableRegisterer }, { token: HotSettingsResolver }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.3.6\", type: HotTableComponent, selector: \"hot-table\", inputs: { settings: \"settings\", hotId: \"hotId\", activeHeaderClassName: \"activeHeaderClassName\", allowEmpty: \"allowEmpty\", allowHtml: \"allowHtml\", allowInsertColumn: \"allowInsertColumn\", allowInsertRow: \"allowInsertRow\", allowInvalid: \"allowInvalid\", allowRemoveColumn: \"allowRemoveColumn\", allowRemoveRow: \"allowRemoveRow\", ariaTags: \"ariaTags\", autoColumnSize: \"autoColumnSize\", autoRowSize: \"autoRowSize\", autoWrapCol: \"autoWrapCol\", autoWrapRow: \"autoWrapRow\", bindRowsWithHeaders: \"bindRowsWithHeaders\", cell: \"cell\", cells: \"cells\", checkedTemplate: \"checkedTemplate\", className: \"className\", colHeaders: \"colHeaders\", collapsibleColumns: \"collapsibleColumns\", columnHeaderHeight: \"columnHeaderHeight\", columns: \"columns\", columnSorting: \"columnSorting\", columnSummary: \"columnSummary\", colWidths: \"colWidths\", commentedCellClassName: \"commentedCellClassName\", comments: \"comments\", contextMenu: \"contextMenu\", copyable: \"copyable\", copyPaste: \"copyPaste\", correctFormat: \"correctFormat\", currentColClassName: \"currentColClassName\", currentHeaderClassName: \"currentHeaderClassName\", currentRowClassName: \"currentRowClassName\", customBorders: \"customBorders\", data: \"data\", dataSchema: \"dataSchema\", dateFormat: \"dateFormat\", datePickerConfig: \"datePickerConfig\", defaultDate: \"defaultDate\", tabNavigation: \"tabNavigation\", disableVisualSelection: \"disableVisualSelection\", dragToScroll: \"dragToScroll\", dropdownMenu: \"dropdownMenu\", editor: \"editor\", enterBeginsEditing: \"enterBeginsEditing\", enterMoves: \"enterMoves\", fillHandle: \"fillHandle\", filter: \"filter\", filteringCaseSensitive: \"filteringCaseSensitive\", filters: \"filters\", fixedColumnsLeft: \"fixedColumnsLeft\", fixedColumnsStart: \"fixedColumnsStart\", fixedRowsBottom: \"fixedRowsBottom\", fixedRowsTop: \"fixedRowsTop\", formulas: \"formulas\", fragmentSelection: \"fragmentSelection\", height: \"height\", hiddenColumns: \"hiddenColumns\", hiddenRows: \"hiddenRows\", invalidCellClassName: \"invalidCellClassName\", imeFastEdit: \"imeFastEdit\", label: \"label\", language: \"language\", layoutDirection: \"layoutDirection\", licenseKey: \"licenseKey\", locale: \"locale\", manualColumnFreeze: \"manualColumnFreeze\", manualColumnMove: \"manualColumnMove\", manualColumnResize: \"manualColumnResize\", manualRowMove: \"manualRowMove\", manualRowResize: \"manualRowResize\", maxCols: \"maxCols\", maxRows: \"maxRows\", mergeCells: \"mergeCells\", minCols: \"minCols\", minRows: \"minRows\", minSpareCols: \"minSpareCols\", minSpareRows: \"minSpareRows\", multiColumnSorting: \"multiColumnSorting\", navigableHeaders: \"navigableHeaders\", nestedHeaders: \"nestedHeaders\", nestedRows: \"nestedRows\", noWordWrapClassName: \"noWordWrapClassName\", numericFormat: \"numericFormat\", observeDOMVisibility: \"observeDOMVisibility\", outsideClickDeselects: \"outsideClickDeselects\", persistentState: \"persistentState\", placeholder: \"placeholder\", placeholderCellClassName: \"placeholderCellClassName\", preventOverflow: \"preventOverflow\", preventWheel: \"preventWheel\", readOnly: \"readOnly\", readOnlyCellClassName: \"readOnlyCellClassName\", renderAllColumns: \"renderAllColumns\", renderAllRows: \"renderAllRows\", renderer: \"renderer\", rowHeaders: \"rowHeaders\", rowHeaderWidth: \"rowHeaderWidth\", rowHeights: \"rowHeights\", search: \"search\", selectionMode: \"selectionMode\", selectOptions: \"selectOptions\", skipColumnOnPaste: \"skipColumnOnPaste\", skipRowOnPaste: \"skipRowOnPaste\", sortByRelevance: \"sortByRelevance\", source: \"source\", startCols: \"startCols\", startRows: \"startRows\", stretchH: \"stretchH\", strict: \"strict\", tableClassName: \"tableClassName\", tabMoves: \"tabMoves\", title: \"title\", trimDropdown: \"trimDropdown\", trimRows: \"trimRows\", trimWhitespace: \"trimWhitespace\", type: \"type\", uncheckedTemplate: \"uncheckedTemplate\", undo: \"undo\", validator: \"validator\", viewportColumnRenderingOffset: \"viewportColumnRenderingOffset\", viewportRowRenderingOffset: \"viewportRowRenderingOffset\", visibleRows: \"visibleRows\", width: \"width\", wordWrap: \"wordWrap\", afterAddChild: \"afterAddChild\", afterAutofill: \"afterAutofill\", afterBeginEditing: \"afterBeginEditing\", afterCellMetaReset: \"afterCellMetaReset\", afterChange: \"afterChange\", afterChangesObserved: \"afterChangesObserved\", afterColumnCollapse: \"afterColumnCollapse\", afterColumnExpand: \"afterColumnExpand\", afterColumnFreeze: \"afterColumnFreeze\", afterColumnMove: \"afterColumnMove\", afterColumnResize: \"afterColumnResize\", afterColumnSequenceChange: \"afterColumnSequenceChange\", afterColumnSort: \"afterColumnSort\", afterColumnUnfreeze: \"afterColumnUnfreeze\", afterContextMenuDefaultOptions: \"afterContextMenuDefaultOptions\", afterContextMenuHide: \"afterContextMenuHide\", afterContextMenuShow: \"afterContextMenuShow\", afterCopy: \"afterCopy\", afterCopyLimit: \"afterCopyLimit\", afterCreateCol: \"afterCreateCol\", afterCreateRow: \"afterCreateRow\", afterCut: \"afterCut\", afterDeselect: \"afterDeselect\", afterDestroy: \"afterDestroy\", afterDetachChild: \"afterDetachChild\", afterDocumentKeyDown: \"afterDocumentKeyDown\", afterDrawSelection: \"afterDrawSelection\", afterDropdownMenuDefaultOptions: \"afterDropdownMenuDefaultOptions\", afterDropdownMenuHide: \"afterDropdownMenuHide\", afterDropdownMenuShow: \"afterDropdownMenuShow\", afterFilter: \"afterFilter\", afterFormulasValuesUpdate: \"afterFormulasValuesUpdate\", afterGetCellMeta: \"afterGetCellMeta\", afterGetColHeader: \"afterGetColHeader\", afterGetColumnHeaderRenderers: \"afterGetColumnHeaderRenderers\", afterGetRowHeader: \"afterGetRowHeader\", afterGetRowHeaderRenderers: \"afterGetRowHeaderRenderers\", afterHideColumns: \"afterHideColumns\", afterHideRows: \"afterHideRows\", afterInit: \"afterInit\", afterLanguageChange: \"afterLanguageChange\", afterListen: \"afterListen\", afterLoadData: \"afterLoadData\", afterMergeCells: \"afterMergeCells\", afterModifyTransformEnd: \"afterModifyTransformEnd\", afterModifyTransformFocus: \"afterModifyTransformFocus\", afterModifyTransformStart: \"afterModifyTransformStart\", afterMomentumScroll: \"afterMomentumScroll\", afterNamedExpressionAdded: \"afterNamedExpressionAdded\", afterNamedExpressionRemoved: \"afterNamedExpressionRemoved\", afterOnCellContextMenu: \"afterOnCellContextMenu\", afterOnCellCornerDblClick: \"afterOnCellCornerDblClick\", afterOnCellCornerMouseDown: \"afterOnCellCornerMouseDown\", afterOnCellMouseDown: \"afterOnCellMouseDown\", afterOnCellMouseOut: \"afterOnCellMouseOut\", afterOnCellMouseOver: \"afterOnCellMouseOver\", afterOnCellMouseUp: \"afterOnCellMouseUp\", afterPaste: \"afterPaste\", afterPluginsInitialized: \"afterPluginsInitialized\", afterRedo: \"afterRedo\", afterRedoStackChange: \"afterRedoStackChange\", afterRefreshDimensions: \"afterRefreshDimensions\", afterRemoveCellMeta: \"afterRemoveCellMeta\", afterRemoveCol: \"afterRemoveCol\", afterRemoveRow: \"afterRemoveRow\", afterRender: \"afterRender\", afterRenderer: \"afterRenderer\", afterRowMove: \"afterRowMove\", afterRowResize: \"afterRowResize\", afterRowSequenceChange: \"afterRowSequenceChange\", afterScrollHorizontally: \"afterScrollHorizontally\", afterScrollVertically: \"afterScrollVertically\", afterScroll: \"afterScroll\", afterSelectColumns: \"afterSelectColumns\", afterSelection: \"afterSelection\", afterSelectionByProp: \"afterSelectionByProp\", afterSelectionEnd: \"afterSelectionEnd\", afterSelectionEndByProp: \"afterSelectionEndByProp\", afterSelectionFocusSet: \"afterSelectionFocusSet\", afterSelectRows: \"afterSelectRows\", afterSetCellMeta: \"afterSetCellMeta\", afterSetDataAtCell: \"afterSetDataAtCell\", afterSetDataAtRowProp: \"afterSetDataAtRowProp\", afterSetSourceDataAtCell: \"afterSetSourceDataAtCell\", afterSheetAdded: \"afterSheetAdded\", afterSheetRenamed: \"afterSheetRenamed\", afterSheetRemoved: \"afterSheetRemoved\", afterTrimRow: \"afterTrimRow\", afterUndo: \"afterUndo\", afterUndoStackChange: \"afterUndoStackChange\", afterUnhideColumns: \"afterUnhideColumns\", afterUnhideRows: \"afterUnhideRows\", afterUnlisten: \"afterUnlisten\", afterUnmergeCells: \"afterUnmergeCells\", afterUntrimRow: \"afterUntrimRow\", afterUpdateData: \"afterUpdateData\", afterUpdateSettings: \"afterUpdateSettings\", afterValidate: \"afterValidate\", afterViewportColumnCalculatorOverride: \"afterViewportColumnCalculatorOverride\", afterViewportRowCalculatorOverride: \"afterViewportRowCalculatorOverride\", afterViewRender: \"afterViewRender\", beforeAddChild: \"beforeAddChild\", beforeAutofill: \"beforeAutofill\", beforeBeginEditing: \"beforeBeginEditing\", beforeCellAlignment: \"beforeCellAlignment\", beforeChange: \"beforeChange\", beforeChangeRender: \"beforeChangeRender\", beforeColumnCollapse: \"beforeColumnCollapse\", beforeColumnExpand: \"beforeColumnExpand\", beforeColumnFreeze: \"beforeColumnFreeze\", beforeColumnMove: \"beforeColumnMove\", beforeColumnResize: \"beforeColumnResize\", beforeColumnSort: \"beforeColumnSort\", beforeColumnWrap: \"beforeColumnWrap\", beforeColumnUnfreeze: \"beforeColumnUnfreeze\", beforeContextMenuSetItems: \"beforeContextMenuSetItems\", beforeContextMenuShow: \"beforeContextMenuShow\", beforeCopy: \"beforeCopy\", beforeCreateCol: \"beforeCreateCol\", beforeCreateRow: \"beforeCreateRow\", beforeCut: \"beforeCut\", beforeDetachChild: \"beforeDetachChild\", beforeDrawBorders: \"beforeDrawBorders\", beforeDropdownMenuSetItems: \"beforeDropdownMenuSetItems\", beforeDropdownMenuShow: \"beforeDropdownMenuShow\", beforeFilter: \"beforeFilter\", beforeGetCellMeta: \"beforeGetCellMeta\", beforeHideColumns: \"beforeHideColumns\", beforeHideRows: \"beforeHideRows\", beforeHighlightingColumnHeader: \"beforeHighlightingColumnHeader\", beforeHighlightingRowHeader: \"beforeHighlightingRowHeader\", beforeInit: \"beforeInit\", beforeInitWalkontable: \"beforeInitWalkontable\", beforeKeyDown: \"beforeKeyDown\", beforeLanguageChange: \"beforeLanguageChange\", beforeLoadData: \"beforeLoadData\", beforeMergeCells: \"beforeMergeCells\", beforeOnCellContextMenu: \"beforeOnCellContextMenu\", beforeOnCellMouseDown: \"beforeOnCellMouseDown\", beforeOnCellMouseOut: \"beforeOnCellMouseOut\", beforeOnCellMouseOver: \"beforeOnCellMouseOver\", beforeOnCellMouseUp: \"beforeOnCellMouseUp\", beforePaste: \"beforePaste\", beforeRedo: \"beforeRedo\", beforeRedoStackChange: \"beforeRedoStackChange\", beforeRefreshDimensions: \"beforeRefreshDimensions\", beforeRemoveCellClassNames: \"beforeRemoveCellClassNames\", beforeRemoveCellMeta: \"beforeRemoveCellMeta\", beforeRemoveCol: \"beforeRemoveCol\", beforeRemoveRow: \"beforeRemoveRow\", beforeRender: \"beforeRender\", beforeRenderer: \"beforeRenderer\", beforeRowMove: \"beforeRowMove\", beforeRowResize: \"beforeRowResize\", beforeRowWrap: \"beforeRowWrap\", beforeSelectColumns: \"beforeSelectColumns\", beforeSelectionFocusSet: \"beforeSelectionFocusSet\", beforeSelectionHighlightSet: \"beforeSelectionHighlightSet\", beforeSelectRows: \"beforeSelectRows\", beforeSetCellMeta: \"beforeSetCellMeta\", beforeSetRangeEnd: \"beforeSetRangeEnd\", beforeSetRangeStart: \"beforeSetRangeStart\", beforeSetRangeStartOnly: \"beforeSetRangeStartOnly\", beforeStretchingColumnWidth: \"beforeStretchingColumnWidth\", beforeTouchScroll: \"beforeTouchScroll\", beforeTrimRow: \"beforeTrimRow\", beforeUndo: \"beforeUndo\", beforeUndoStackChange: \"beforeUndoStackChange\", beforeUnhideColumns: \"beforeUnhideColumns\", beforeUnhideRows: \"beforeUnhideRows\", beforeUnmergeCells: \"beforeUnmergeCells\", beforeUntrimRow: \"beforeUntrimRow\", beforeUpdateData: \"beforeUpdateData\", beforeValidate: \"beforeValidate\", beforeValueRender: \"beforeValueRender\", beforeViewportScroll: \"beforeViewportScroll\", beforeViewportScrollHorizontally: \"beforeViewportScrollHorizontally\", beforeViewportScrollVertically: \"beforeViewportScrollVertically\", beforeViewRender: \"beforeViewRender\", construct: \"construct\", init: \"init\", modifyAutoColumnSizeSeed: \"modifyAutoColumnSizeSeed\", modifyAutofillRange: \"modifyAutofillRange\", modifyColHeader: \"modifyColHeader\", modifyColumnHeaderHeight: \"modifyColumnHeaderHeight\", modifyColumnHeaderValue: \"modifyColumnHeaderValue\", modifyColWidth: \"modifyColWidth\", modifyCopyableRange: \"modifyCopyableRange\", modifyFiltersMultiSelectValue: \"modifyFiltersMultiSelectValue\", modifyFocusedElement: \"modifyFocusedElement\", modifyData: \"modifyData\", modifyFocusOnTabNavigation: \"modifyFocusOnTabNavigation\", modifyGetCellCoords: \"modifyGetCellCoords\", modifyRowData: \"modifyRowData\", modifyRowHeader: \"modifyRowHeader\", modifyRowHeaderWidth: \"modifyRowHeaderWidth\", modifyRowHeight: \"modifyRowHeight\", modifySourceData: \"modifySourceData\", modifyTransformEnd: \"modifyTransformEnd\", modifyTransformFocus: \"modifyTransformFocus\", modifyTransformStart: \"modifyTransformStart\", persistentStateLoad: \"persistentStateLoad\", persistentStateReset: \"persistentStateReset\", persistentStateSave: \"persistentStateSave\" }, providers: [HotTableRegisterer, HotSettingsResolver], viewQueries: [{ propertyName: \"container\", first: true, predicate: [\"container\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: '<div #container [id]=\"hotId\"></div>', isInline: true, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotTableComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'hot-table',\n                    template: '<div #container [id]=\"hotId\"></div>',\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [HotTableRegisterer, HotSettingsResolver],\n                }]\n        }], ctorParameters: () => [{ type: HotTableRegisterer }, { type: HotSettingsResolver }, { type: i0.NgZone }], propDecorators: { container: [{\n                type: ViewChild,\n                args: ['container', { static: false }]\n            }], settings: [{\n                type: Input\n            }], hotId: [{\n                type: Input\n            }], activeHeaderClassName: [{\n                type: Input\n            }], allowEmpty: [{\n                type: Input\n            }], allowHtml: [{\n                type: Input\n            }], allowInsertColumn: [{\n                type: Input\n            }], allowInsertRow: [{\n                type: Input\n            }], allowInvalid: [{\n                type: Input\n            }], allowRemoveColumn: [{\n                type: Input\n            }], allowRemoveRow: [{\n                type: Input\n            }], ariaTags: [{\n                type: Input\n            }], autoColumnSize: [{\n                type: Input\n            }], autoRowSize: [{\n                type: Input\n            }], autoWrapCol: [{\n                type: Input\n            }], autoWrapRow: [{\n                type: Input\n            }], bindRowsWithHeaders: [{\n                type: Input\n            }], cell: [{\n                type: Input\n            }], cells: [{\n                type: Input\n            }], checkedTemplate: [{\n                type: Input\n            }], className: [{\n                type: Input\n            }], colHeaders: [{\n                type: Input\n            }], collapsibleColumns: [{\n                type: Input\n            }], columnHeaderHeight: [{\n                type: Input\n            }], columns: [{\n                type: Input\n            }], columnSorting: [{\n                type: Input\n            }], columnSummary: [{\n                type: Input\n            }], colWidths: [{\n                type: Input\n            }], commentedCellClassName: [{\n                type: Input\n            }], comments: [{\n                type: Input\n            }], contextMenu: [{\n                type: Input\n            }], copyable: [{\n                type: Input\n            }], copyPaste: [{\n                type: Input\n            }], correctFormat: [{\n                type: Input\n            }], currentColClassName: [{\n                type: Input\n            }], currentHeaderClassName: [{\n                type: Input\n            }], currentRowClassName: [{\n                type: Input\n            }], customBorders: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], dataSchema: [{\n                type: Input\n            }], dateFormat: [{\n                type: Input\n            }], datePickerConfig: [{\n                type: Input\n            }], defaultDate: [{\n                type: Input\n            }], tabNavigation: [{\n                type: Input\n            }], disableVisualSelection: [{\n                type: Input\n            }], dragToScroll: [{\n                type: Input\n            }], dropdownMenu: [{\n                type: Input\n            }], editor: [{\n                type: Input\n            }], enterBeginsEditing: [{\n                type: Input\n            }], enterMoves: [{\n                type: Input\n            }], fillHandle: [{\n                type: Input\n            }], filter: [{\n                type: Input\n            }], filteringCaseSensitive: [{\n                type: Input\n            }], filters: [{\n                type: Input\n            }], fixedColumnsLeft: [{\n                type: Input\n            }], fixedColumnsStart: [{\n                type: Input\n            }], fixedRowsBottom: [{\n                type: Input\n            }], fixedRowsTop: [{\n                type: Input\n            }], formulas: [{\n                type: Input\n            }], fragmentSelection: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], hiddenColumns: [{\n                type: Input\n            }], hiddenRows: [{\n                type: Input\n            }], invalidCellClassName: [{\n                type: Input\n            }], imeFastEdit: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], language: [{\n                type: Input\n            }], layoutDirection: [{\n                type: Input\n            }], licenseKey: [{\n                type: Input\n            }], locale: [{\n                type: Input\n            }], manualColumnFreeze: [{\n                type: Input\n            }], manualColumnMove: [{\n                type: Input\n            }], manualColumnResize: [{\n                type: Input\n            }], manualRowMove: [{\n                type: Input\n            }], manualRowResize: [{\n                type: Input\n            }], maxCols: [{\n                type: Input\n            }], maxRows: [{\n                type: Input\n            }], mergeCells: [{\n                type: Input\n            }], minCols: [{\n                type: Input\n            }], minRows: [{\n                type: Input\n            }], minSpareCols: [{\n                type: Input\n            }], minSpareRows: [{\n                type: Input\n            }], multiColumnSorting: [{\n                type: Input\n            }], navigableHeaders: [{\n                type: Input\n            }], nestedHeaders: [{\n                type: Input\n            }], nestedRows: [{\n                type: Input\n            }], noWordWrapClassName: [{\n                type: Input\n            }], numericFormat: [{\n                type: Input\n            }], observeDOMVisibility: [{\n                type: Input\n            }], outsideClickDeselects: [{\n                type: Input\n            }], persistentState: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], placeholderCellClassName: [{\n                type: Input\n            }], preventOverflow: [{\n                type: Input\n            }], preventWheel: [{\n                type: Input\n            }], readOnly: [{\n                type: Input\n            }], readOnlyCellClassName: [{\n                type: Input\n            }], renderAllColumns: [{\n                type: Input\n            }], renderAllRows: [{\n                type: Input\n            }], renderer: [{\n                type: Input\n            }], rowHeaders: [{\n                type: Input\n            }], rowHeaderWidth: [{\n                type: Input\n            }], rowHeights: [{\n                type: Input\n            }], search: [{\n                type: Input\n            }], selectionMode: [{\n                type: Input\n            }], selectOptions: [{\n                type: Input\n            }], skipColumnOnPaste: [{\n                type: Input\n            }], skipRowOnPaste: [{\n                type: Input\n            }], sortByRelevance: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], startCols: [{\n                type: Input\n            }], startRows: [{\n                type: Input\n            }], stretchH: [{\n                type: Input\n            }], strict: [{\n                type: Input\n            }], tableClassName: [{\n                type: Input\n            }], tabMoves: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], trimDropdown: [{\n                type: Input\n            }], trimRows: [{\n                type: Input\n            }], trimWhitespace: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], uncheckedTemplate: [{\n                type: Input\n            }], undo: [{\n                type: Input\n            }], validator: [{\n                type: Input\n            }], viewportColumnRenderingOffset: [{\n                type: Input\n            }], viewportRowRenderingOffset: [{\n                type: Input\n            }], visibleRows: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], wordWrap: [{\n                type: Input\n            }], afterAddChild: [{\n                type: Input\n            }], afterAutofill: [{\n                type: Input\n            }], afterBeginEditing: [{\n                type: Input\n            }], afterCellMetaReset: [{\n                type: Input\n            }], afterChange: [{\n                type: Input\n            }], afterChangesObserved: [{\n                type: Input\n            }], afterColumnCollapse: [{\n                type: Input\n            }], afterColumnExpand: [{\n                type: Input\n            }], afterColumnFreeze: [{\n                type: Input\n            }], afterColumnMove: [{\n                type: Input\n            }], afterColumnResize: [{\n                type: Input\n            }], afterColumnSequenceChange: [{\n                type: Input\n            }], afterColumnSort: [{\n                type: Input\n            }], afterColumnUnfreeze: [{\n                type: Input\n            }], afterContextMenuDefaultOptions: [{\n                type: Input\n            }], afterContextMenuHide: [{\n                type: Input\n            }], afterContextMenuShow: [{\n                type: Input\n            }], afterCopy: [{\n                type: Input\n            }], afterCopyLimit: [{\n                type: Input\n            }], afterCreateCol: [{\n                type: Input\n            }], afterCreateRow: [{\n                type: Input\n            }], afterCut: [{\n                type: Input\n            }], afterDeselect: [{\n                type: Input\n            }], afterDestroy: [{\n                type: Input\n            }], afterDetachChild: [{\n                type: Input\n            }], afterDocumentKeyDown: [{\n                type: Input\n            }], afterDrawSelection: [{\n                type: Input\n            }], afterDropdownMenuDefaultOptions: [{\n                type: Input\n            }], afterDropdownMenuHide: [{\n                type: Input\n            }], afterDropdownMenuShow: [{\n                type: Input\n            }], afterFilter: [{\n                type: Input\n            }], afterFormulasValuesUpdate: [{\n                type: Input\n            }], afterGetCellMeta: [{\n                type: Input\n            }], afterGetColHeader: [{\n                type: Input\n            }], afterGetColumnHeaderRenderers: [{\n                type: Input\n            }], afterGetRowHeader: [{\n                type: Input\n            }], afterGetRowHeaderRenderers: [{\n                type: Input\n            }], afterHideColumns: [{\n                type: Input\n            }], afterHideRows: [{\n                type: Input\n            }], afterInit: [{\n                type: Input\n            }], afterLanguageChange: [{\n                type: Input\n            }], afterListen: [{\n                type: Input\n            }], afterLoadData: [{\n                type: Input\n            }], afterMergeCells: [{\n                type: Input\n            }], afterModifyTransformEnd: [{\n                type: Input\n            }], afterModifyTransformFocus: [{\n                type: Input\n            }], afterModifyTransformStart: [{\n                type: Input\n            }], afterMomentumScroll: [{\n                type: Input\n            }], afterNamedExpressionAdded: [{\n                type: Input\n            }], afterNamedExpressionRemoved: [{\n                type: Input\n            }], afterOnCellContextMenu: [{\n                type: Input\n            }], afterOnCellCornerDblClick: [{\n                type: Input\n            }], afterOnCellCornerMouseDown: [{\n                type: Input\n            }], afterOnCellMouseDown: [{\n                type: Input\n            }], afterOnCellMouseOut: [{\n                type: Input\n            }], afterOnCellMouseOver: [{\n                type: Input\n            }], afterOnCellMouseUp: [{\n                type: Input\n            }], afterPaste: [{\n                type: Input\n            }], afterPluginsInitialized: [{\n                type: Input\n            }], afterRedo: [{\n                type: Input\n            }], afterRedoStackChange: [{\n                type: Input\n            }], afterRefreshDimensions: [{\n                type: Input\n            }], afterRemoveCellMeta: [{\n                type: Input\n            }], afterRemoveCol: [{\n                type: Input\n            }], afterRemoveRow: [{\n                type: Input\n            }], afterRender: [{\n                type: Input\n            }], afterRenderer: [{\n                type: Input\n            }], afterRowMove: [{\n                type: Input\n            }], afterRowResize: [{\n                type: Input\n            }], afterRowSequenceChange: [{\n                type: Input\n            }], afterScrollHorizontally: [{\n                type: Input\n            }], afterScrollVertically: [{\n                type: Input\n            }], afterScroll: [{\n                type: Input\n            }], afterSelectColumns: [{\n                type: Input\n            }], afterSelection: [{\n                type: Input\n            }], afterSelectionByProp: [{\n                type: Input\n            }], afterSelectionEnd: [{\n                type: Input\n            }], afterSelectionEndByProp: [{\n                type: Input\n            }], afterSelectionFocusSet: [{\n                type: Input\n            }], afterSelectRows: [{\n                type: Input\n            }], afterSetCellMeta: [{\n                type: Input\n            }], afterSetDataAtCell: [{\n                type: Input\n            }], afterSetDataAtRowProp: [{\n                type: Input\n            }], afterSetSourceDataAtCell: [{\n                type: Input\n            }], afterSheetAdded: [{\n                type: Input\n            }], afterSheetRenamed: [{\n                type: Input\n            }], afterSheetRemoved: [{\n                type: Input\n            }], afterTrimRow: [{\n                type: Input\n            }], afterUndo: [{\n                type: Input\n            }], afterUndoStackChange: [{\n                type: Input\n            }], afterUnhideColumns: [{\n                type: Input\n            }], afterUnhideRows: [{\n                type: Input\n            }], afterUnlisten: [{\n                type: Input\n            }], afterUnmergeCells: [{\n                type: Input\n            }], afterUntrimRow: [{\n                type: Input\n            }], afterUpdateData: [{\n                type: Input\n            }], afterUpdateSettings: [{\n                type: Input\n            }], afterValidate: [{\n                type: Input\n            }], afterViewportColumnCalculatorOverride: [{\n                type: Input\n            }], afterViewportRowCalculatorOverride: [{\n                type: Input\n            }], afterViewRender: [{\n                type: Input\n            }], beforeAddChild: [{\n                type: Input\n            }], beforeAutofill: [{\n                type: Input\n            }], beforeBeginEditing: [{\n                type: Input\n            }], beforeCellAlignment: [{\n                type: Input\n            }], beforeChange: [{\n                type: Input\n            }], beforeChangeRender: [{\n                type: Input\n            }], beforeColumnCollapse: [{\n                type: Input\n            }], beforeColumnExpand: [{\n                type: Input\n            }], beforeColumnFreeze: [{\n                type: Input\n            }], beforeColumnMove: [{\n                type: Input\n            }], beforeColumnResize: [{\n                type: Input\n            }], beforeColumnSort: [{\n                type: Input\n            }], beforeColumnWrap: [{\n                type: Input\n            }], beforeColumnUnfreeze: [{\n                type: Input\n            }], beforeContextMenuSetItems: [{\n                type: Input\n            }], beforeContextMenuShow: [{\n                type: Input\n            }], beforeCopy: [{\n                type: Input\n            }], beforeCreateCol: [{\n                type: Input\n            }], beforeCreateRow: [{\n                type: Input\n            }], beforeCut: [{\n                type: Input\n            }], beforeDetachChild: [{\n                type: Input\n            }], beforeDrawBorders: [{\n                type: Input\n            }], beforeDropdownMenuSetItems: [{\n                type: Input\n            }], beforeDropdownMenuShow: [{\n                type: Input\n            }], beforeFilter: [{\n                type: Input\n            }], beforeGetCellMeta: [{\n                type: Input\n            }], beforeHideColumns: [{\n                type: Input\n            }], beforeHideRows: [{\n                type: Input\n            }], beforeHighlightingColumnHeader: [{\n                type: Input\n            }], beforeHighlightingRowHeader: [{\n                type: Input\n            }], beforeInit: [{\n                type: Input\n            }], beforeInitWalkontable: [{\n                type: Input\n            }], beforeKeyDown: [{\n                type: Input\n            }], beforeLanguageChange: [{\n                type: Input\n            }], beforeLoadData: [{\n                type: Input\n            }], beforeMergeCells: [{\n                type: Input\n            }], beforeOnCellContextMenu: [{\n                type: Input\n            }], beforeOnCellMouseDown: [{\n                type: Input\n            }], beforeOnCellMouseOut: [{\n                type: Input\n            }], beforeOnCellMouseOver: [{\n                type: Input\n            }], beforeOnCellMouseUp: [{\n                type: Input\n            }], beforePaste: [{\n                type: Input\n            }], beforeRedo: [{\n                type: Input\n            }], beforeRedoStackChange: [{\n                type: Input\n            }], beforeRefreshDimensions: [{\n                type: Input\n            }], beforeRemoveCellClassNames: [{\n                type: Input\n            }], beforeRemoveCellMeta: [{\n                type: Input\n            }], beforeRemoveCol: [{\n                type: Input\n            }], beforeRemoveRow: [{\n                type: Input\n            }], beforeRender: [{\n                type: Input\n            }], beforeRenderer: [{\n                type: Input\n            }], beforeRowMove: [{\n                type: Input\n            }], beforeRowResize: [{\n                type: Input\n            }], beforeRowWrap: [{\n                type: Input\n            }], beforeSelectColumns: [{\n                type: Input\n            }], beforeSelectionFocusSet: [{\n                type: Input\n            }], beforeSelectionHighlightSet: [{\n                type: Input\n            }], beforeSelectRows: [{\n                type: Input\n            }], beforeSetCellMeta: [{\n                type: Input\n            }], beforeSetRangeEnd: [{\n                type: Input\n            }], beforeSetRangeStart: [{\n                type: Input\n            }], beforeSetRangeStartOnly: [{\n                type: Input\n            }], beforeStretchingColumnWidth: [{\n                type: Input\n            }], beforeTouchScroll: [{\n                type: Input\n            }], beforeTrimRow: [{\n                type: Input\n            }], beforeUndo: [{\n                type: Input\n            }], beforeUndoStackChange: [{\n                type: Input\n            }], beforeUnhideColumns: [{\n                type: Input\n            }], beforeUnhideRows: [{\n                type: Input\n            }], beforeUnmergeCells: [{\n                type: Input\n            }], beforeUntrimRow: [{\n                type: Input\n            }], beforeUpdateData: [{\n                type: Input\n            }], beforeValidate: [{\n                type: Input\n            }], beforeValueRender: [{\n                type: Input\n            }], beforeViewportScroll: [{\n                type: Input\n            }], beforeViewportScrollHorizontally: [{\n                type: Input\n            }], beforeViewportScrollVertically: [{\n                type: Input\n            }], beforeViewRender: [{\n                type: Input\n            }], construct: [{\n                type: Input\n            }], init: [{\n                type: Input\n            }], modifyAutoColumnSizeSeed: [{\n                type: Input\n            }], modifyAutofillRange: [{\n                type: Input\n            }], modifyColHeader: [{\n                type: Input\n            }], modifyColumnHeaderHeight: [{\n                type: Input\n            }], modifyColumnHeaderValue: [{\n                type: Input\n            }], modifyColWidth: [{\n                type: Input\n            }], modifyCopyableRange: [{\n                type: Input\n            }], modifyFiltersMultiSelectValue: [{\n                type: Input\n            }], modifyFocusedElement: [{\n                type: Input\n            }], modifyData: [{\n                type: Input\n            }], modifyFocusOnTabNavigation: [{\n                type: Input\n            }], modifyGetCellCoords: [{\n                type: Input\n            }], modifyRowData: [{\n                type: Input\n            }], modifyRowHeader: [{\n                type: Input\n            }], modifyRowHeaderWidth: [{\n                type: Input\n            }], modifyRowHeight: [{\n                type: Input\n            }], modifySourceData: [{\n                type: Input\n            }], modifyTransformEnd: [{\n                type: Input\n            }], modifyTransformFocus: [{\n                type: Input\n            }], modifyTransformStart: [{\n                type: Input\n            }], persistentStateLoad: [{\n                type: Input\n            }], persistentStateReset: [{\n                type: Input\n            }], persistentStateSave: [{\n                type: Input\n            }] } });","originalLength":110129,"removedExports":[],"renderedExports":["HotTableComponent"],"renderedLength":46183},"/Users/marekmartuszewski/Sites/hot3/wrappers/angular/dist/hot-table/esm2022/lib/hot-column.component.mjs":{"code":"class HotColumnComponent {\n    parentComponent;\n    firstRun = true;\n    // handsontable column options\n    allowEmpty;\n    allowHtml;\n    allowInvalid;\n    checkedTemplate;\n    className;\n    columnSorting;\n    colWidths;\n    commentedCellClassName;\n    copyable;\n    correctFormat;\n    data;\n    dateFormat;\n    defaultDate;\n    editor;\n    filteringCaseSensitive;\n    invalidCellClassName;\n    label;\n    language;\n    noWordWrapClassName;\n    numericFormat;\n    placeholder;\n    placeholderCellClassName;\n    readOnly;\n    readOnlyCellClassName;\n    renderer;\n    selectOptions;\n    skipColumnOnPaste;\n    sortByRelevance;\n    source;\n    strict;\n    title;\n    trimDropdown;\n    type;\n    uncheckedTemplate;\n    validator;\n    visibleRows;\n    width;\n    wordWrap;\n    constructor(parentComponent) {\n        this.parentComponent = parentComponent;\n    }\n    ngOnInit() {\n        this.firstRun = false;\n        this.parentComponent.addColumn(this);\n    }\n    ngOnChanges() {\n        if (this.firstRun) {\n            return;\n        }\n        this.parentComponent.onAfterColumnsChange();\n    }\n    ngOnDestroy() {\n        this.parentComponent.removeColumn(this);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotColumnComponent, deps: [{ token: HotTableComponent }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.3.6\", type: HotColumnComponent, selector: \"hot-column\", inputs: { allowEmpty: \"allowEmpty\", allowHtml: \"allowHtml\", allowInvalid: \"allowInvalid\", checkedTemplate: \"checkedTemplate\", className: \"className\", columnSorting: \"columnSorting\", colWidths: \"colWidths\", commentedCellClassName: \"commentedCellClassName\", copyable: \"copyable\", correctFormat: \"correctFormat\", data: \"data\", dateFormat: \"dateFormat\", defaultDate: \"defaultDate\", editor: \"editor\", filteringCaseSensitive: \"filteringCaseSensitive\", invalidCellClassName: \"invalidCellClassName\", label: \"label\", language: \"language\", noWordWrapClassName: \"noWordWrapClassName\", numericFormat: \"numericFormat\", placeholder: \"placeholder\", placeholderCellClassName: \"placeholderCellClassName\", readOnly: \"readOnly\", readOnlyCellClassName: \"readOnlyCellClassName\", renderer: \"renderer\", selectOptions: \"selectOptions\", skipColumnOnPaste: \"skipColumnOnPaste\", sortByRelevance: \"sortByRelevance\", source: \"source\", strict: \"strict\", title: \"title\", trimDropdown: \"trimDropdown\", type: \"type\", uncheckedTemplate: \"uncheckedTemplate\", validator: \"validator\", visibleRows: \"visibleRows\", width: \"width\", wordWrap: \"wordWrap\" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotColumnComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'hot-column',\n                    template: '',\n                }]\n        }], ctorParameters: () => [{ type: HotTableComponent }], propDecorators: { allowEmpty: [{\n                type: Input\n            }], allowHtml: [{\n                type: Input\n            }], allowInvalid: [{\n                type: Input\n            }], checkedTemplate: [{\n                type: Input\n            }], className: [{\n                type: Input\n            }], columnSorting: [{\n                type: Input\n            }], colWidths: [{\n                type: Input\n            }], commentedCellClassName: [{\n                type: Input\n            }], copyable: [{\n                type: Input\n            }], correctFormat: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], dateFormat: [{\n                type: Input\n            }], defaultDate: [{\n                type: Input\n            }], editor: [{\n                type: Input\n            }], filteringCaseSensitive: [{\n                type: Input\n            }], invalidCellClassName: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], language: [{\n                type: Input\n            }], noWordWrapClassName: [{\n                type: Input\n            }], numericFormat: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], placeholderCellClassName: [{\n                type: Input\n            }], readOnly: [{\n                type: Input\n            }], readOnlyCellClassName: [{\n                type: Input\n            }], renderer: [{\n                type: Input\n            }], selectOptions: [{\n                type: Input\n            }], skipColumnOnPaste: [{\n                type: Input\n            }], sortByRelevance: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], strict: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], trimDropdown: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], uncheckedTemplate: [{\n                type: Input\n            }], validator: [{\n                type: Input\n            }], visibleRows: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], wordWrap: [{\n                type: Input\n            }] } });","originalLength":13232,"removedExports":[],"renderedExports":["HotColumnComponent"],"renderedLength":5355},"/Users/marekmartuszewski/Sites/hot3/wrappers/angular/dist/hot-table/esm2022/lib/hot-table.module.mjs":{"code":"class HotTableModule {\n    static version = '14.3.0';\n    static forRoot() {\n        return {\n            ngModule: HotTableModule,\n            providers: [HotTableRegisterer],\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.3.6\", ngImport: i0, type: HotTableModule, declarations: [HotTableComponent,\n            HotColumnComponent], exports: [HotTableComponent,\n            HotColumnComponent] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotTableModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        HotTableComponent,\n                        HotColumnComponent,\n                    ],\n                    exports: [\n                        HotTableComponent,\n                        HotColumnComponent,\n                    ]\n                }]\n        }] });","originalLength":3412,"removedExports":[],"renderedExports":["HotTableModule"],"renderedLength":1230},"/Users/marekmartuszewski/Sites/hot3/wrappers/angular/dist/hot-table/esm2022/public-api.mjs":{"code":"/*\n * Public API Surface of hot-table\n */","originalLength":1080,"removedExports":[],"renderedExports":[],"renderedLength":41},"/Users/marekmartuszewski/Sites/hot3/wrappers/angular/dist/hot-table/esm2022/handsontable-angular.mjs":{"code":"/**\n * Generated bundle index. Do not edit.\n */","originalLength":520,"removedExports":[],"renderedExports":[],"renderedLength":47}},"referencedFiles":[],"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, ViewEncapsulation, ViewChild, Input, NgModule } from '@angular/core';\nimport Handsontable from 'handsontable/base';\n\nconst instances = new Map();\nconst HOT_DESTROYED_WARNING = 'The Handsontable instance bound to this component was destroyed and cannot be' +\n    ' used properly.';\nclass HotTableRegisterer {\n    getInstance(id) {\n        const hotInstance = instances.get(id);\n        if (hotInstance.isDestroyed) {\n            console.warn(HOT_DESTROYED_WARNING);\n            return null;\n        }\n        return hotInstance;\n    }\n    registerInstance(id, instance) {\n        return instances.set(id, instance);\n    }\n    removeInstance(id) {\n        return instances.delete(id);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotTableRegisterer, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotTableRegisterer });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotTableRegisterer, decorators: [{\n            type: Injectable\n        }] });\n\nconst AVAILABLE_OPTIONS = Object.keys(Handsontable.DefaultSettings);\nconst AVAILABLE_HOOKS = Handsontable.hooks.getRegistered();\nclass HotSettingsResolver {\n    mergeSettings(component) {\n        const isSettingsObject = 'settings' in component && (typeof component['settings'] === 'object');\n        const mergedSettings = isSettingsObject ? component['settings'] : {};\n        const options = AVAILABLE_HOOKS.concat(AVAILABLE_OPTIONS);\n        options.forEach(key => {\n            const isHook = AVAILABLE_HOOKS.indexOf(key) > -1;\n            let option;\n            if (isSettingsObject && isHook) {\n                option = component['settings'][key];\n            }\n            if (component[key] !== void 0) {\n                option = component[key];\n            }\n            if (option === void 0) {\n                return;\n            }\n            else if (('ngZone' in component) && (typeof option === 'function' && isHook)) {\n                mergedSettings[key] = function (...args) {\n                    return component.ngZone.run(() => option.apply(this, args));\n                };\n            }\n            else {\n                mergedSettings[key] = option;\n            }\n        });\n        return mergedSettings;\n    }\n    prepareChanges(changes) {\n        const result = {};\n        const parameters = Object.keys(changes);\n        parameters.forEach((param) => {\n            if (changes.hasOwnProperty(param)) {\n                result[param] = changes[param].currentValue;\n            }\n        });\n        return result;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotSettingsResolver, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotSettingsResolver });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotSettingsResolver, decorators: [{\n            type: Injectable\n        }] });\n\nclass HotTableComponent {\n    _hotTableRegisterer;\n    _hotSettingsResolver;\n    ngZone;\n    container;\n    __hotInstance = null;\n    columnsComponents = [];\n    // component inputs\n    settings;\n    hotId = '';\n    // handsontable options\n    activeHeaderClassName;\n    allowEmpty;\n    allowHtml;\n    allowInsertColumn;\n    allowInsertRow;\n    allowInvalid;\n    allowRemoveColumn;\n    allowRemoveRow;\n    ariaTags;\n    autoColumnSize;\n    autoRowSize;\n    autoWrapCol;\n    autoWrapRow;\n    bindRowsWithHeaders;\n    cell;\n    cells;\n    checkedTemplate;\n    className;\n    colHeaders;\n    collapsibleColumns;\n    columnHeaderHeight;\n    columns;\n    columnSorting;\n    columnSummary;\n    colWidths;\n    commentedCellClassName;\n    comments;\n    contextMenu;\n    copyable;\n    copyPaste;\n    correctFormat;\n    currentColClassName;\n    currentHeaderClassName;\n    currentRowClassName;\n    customBorders;\n    data;\n    dataSchema;\n    dateFormat;\n    datePickerConfig;\n    defaultDate;\n    tabNavigation;\n    disableVisualSelection;\n    dragToScroll;\n    dropdownMenu;\n    editor;\n    enterBeginsEditing;\n    enterMoves;\n    fillHandle;\n    filter;\n    filteringCaseSensitive;\n    filters;\n    fixedColumnsLeft;\n    fixedColumnsStart;\n    fixedRowsBottom;\n    fixedRowsTop;\n    formulas;\n    fragmentSelection;\n    height;\n    hiddenColumns;\n    hiddenRows;\n    invalidCellClassName;\n    imeFastEdit;\n    label;\n    language;\n    layoutDirection;\n    licenseKey;\n    locale;\n    manualColumnFreeze;\n    manualColumnMove;\n    manualColumnResize;\n    manualRowMove;\n    manualRowResize;\n    maxCols;\n    maxRows;\n    mergeCells;\n    minCols;\n    minRows;\n    minSpareCols;\n    minSpareRows;\n    multiColumnSorting;\n    navigableHeaders;\n    nestedHeaders;\n    nestedRows;\n    noWordWrapClassName;\n    numericFormat;\n    observeDOMVisibility;\n    outsideClickDeselects;\n    persistentState;\n    placeholder;\n    placeholderCellClassName;\n    preventOverflow;\n    preventWheel;\n    readOnly;\n    readOnlyCellClassName;\n    renderAllColumns;\n    renderAllRows;\n    renderer;\n    rowHeaders;\n    rowHeaderWidth;\n    rowHeights;\n    search;\n    selectionMode;\n    selectOptions;\n    skipColumnOnPaste;\n    skipRowOnPaste;\n    sortByRelevance;\n    source;\n    startCols;\n    startRows;\n    stretchH;\n    strict;\n    tableClassName;\n    tabMoves;\n    title;\n    trimDropdown;\n    trimRows;\n    trimWhitespace;\n    type;\n    uncheckedTemplate;\n    undo;\n    validator;\n    viewportColumnRenderingOffset;\n    viewportRowRenderingOffset;\n    visibleRows;\n    width;\n    wordWrap;\n    // handsontable hooks\n    afterAddChild;\n    afterAutofill;\n    afterBeginEditing;\n    afterCellMetaReset;\n    afterChange;\n    afterChangesObserved;\n    afterColumnCollapse;\n    afterColumnExpand;\n    afterColumnFreeze;\n    afterColumnMove;\n    afterColumnResize;\n    afterColumnSequenceChange;\n    afterColumnSort;\n    afterColumnUnfreeze;\n    afterContextMenuDefaultOptions;\n    afterContextMenuHide;\n    afterContextMenuShow;\n    afterCopy;\n    afterCopyLimit;\n    afterCreateCol;\n    afterCreateRow;\n    afterCut;\n    afterDeselect;\n    afterDestroy;\n    afterDetachChild;\n    afterDocumentKeyDown;\n    afterDrawSelection;\n    afterDropdownMenuDefaultOptions;\n    afterDropdownMenuHide;\n    afterDropdownMenuShow;\n    afterFilter;\n    afterFormulasValuesUpdate;\n    afterGetCellMeta;\n    afterGetColHeader;\n    afterGetColumnHeaderRenderers;\n    afterGetRowHeader;\n    afterGetRowHeaderRenderers;\n    afterHideColumns;\n    afterHideRows;\n    afterInit;\n    afterLanguageChange;\n    afterListen;\n    afterLoadData;\n    afterMergeCells;\n    afterModifyTransformEnd;\n    afterModifyTransformFocus;\n    afterModifyTransformStart;\n    afterMomentumScroll;\n    afterNamedExpressionAdded;\n    afterNamedExpressionRemoved;\n    afterOnCellContextMenu;\n    afterOnCellCornerDblClick;\n    afterOnCellCornerMouseDown;\n    afterOnCellMouseDown;\n    afterOnCellMouseOut;\n    afterOnCellMouseOver;\n    afterOnCellMouseUp;\n    afterPaste;\n    afterPluginsInitialized;\n    afterRedo;\n    afterRedoStackChange;\n    afterRefreshDimensions;\n    afterRemoveCellMeta;\n    afterRemoveCol;\n    afterRemoveRow;\n    afterRender;\n    afterRenderer;\n    afterRowMove;\n    afterRowResize;\n    afterRowSequenceChange;\n    afterScrollHorizontally;\n    afterScrollVertically;\n    afterScroll;\n    afterSelectColumns;\n    afterSelection;\n    afterSelectionByProp;\n    afterSelectionEnd;\n    afterSelectionEndByProp;\n    afterSelectionFocusSet;\n    afterSelectRows;\n    afterSetCellMeta;\n    afterSetDataAtCell;\n    afterSetDataAtRowProp;\n    afterSetSourceDataAtCell;\n    afterSheetAdded;\n    afterSheetRenamed;\n    afterSheetRemoved;\n    afterTrimRow;\n    afterUndo;\n    afterUndoStackChange;\n    afterUnhideColumns;\n    afterUnhideRows;\n    afterUnlisten;\n    afterUnmergeCells;\n    afterUntrimRow;\n    afterUpdateData;\n    afterUpdateSettings;\n    afterValidate;\n    afterViewportColumnCalculatorOverride;\n    afterViewportRowCalculatorOverride;\n    afterViewRender;\n    beforeAddChild;\n    beforeAutofill;\n    beforeBeginEditing;\n    beforeCellAlignment;\n    beforeChange;\n    beforeChangeRender;\n    beforeColumnCollapse;\n    beforeColumnExpand;\n    beforeColumnFreeze;\n    beforeColumnMove;\n    beforeColumnResize;\n    beforeColumnSort;\n    beforeColumnWrap;\n    beforeColumnUnfreeze;\n    beforeContextMenuSetItems;\n    beforeContextMenuShow;\n    beforeCopy;\n    beforeCreateCol;\n    beforeCreateRow;\n    beforeCut;\n    beforeDetachChild;\n    beforeDrawBorders;\n    beforeDropdownMenuSetItems;\n    beforeDropdownMenuShow;\n    beforeFilter;\n    beforeGetCellMeta;\n    beforeHideColumns;\n    beforeHideRows;\n    beforeHighlightingColumnHeader;\n    beforeHighlightingRowHeader;\n    beforeInit;\n    beforeInitWalkontable;\n    beforeKeyDown;\n    beforeLanguageChange;\n    beforeLoadData;\n    beforeMergeCells;\n    beforeOnCellContextMenu;\n    beforeOnCellMouseDown;\n    beforeOnCellMouseOut;\n    beforeOnCellMouseOver;\n    beforeOnCellMouseUp;\n    beforePaste;\n    beforeRedo;\n    beforeRedoStackChange;\n    beforeRefreshDimensions;\n    beforeRemoveCellClassNames;\n    beforeRemoveCellMeta;\n    beforeRemoveCol;\n    beforeRemoveRow;\n    beforeRender;\n    beforeRenderer;\n    beforeRowMove;\n    beforeRowResize;\n    beforeRowWrap;\n    beforeSelectColumns;\n    beforeSelectionFocusSet;\n    beforeSelectionHighlightSet;\n    beforeSelectRows;\n    beforeSetCellMeta;\n    beforeSetRangeEnd;\n    beforeSetRangeStart;\n    beforeSetRangeStartOnly;\n    beforeStretchingColumnWidth;\n    beforeTouchScroll;\n    beforeTrimRow;\n    beforeUndo;\n    beforeUndoStackChange;\n    beforeUnhideColumns;\n    beforeUnhideRows;\n    beforeUnmergeCells;\n    beforeUntrimRow;\n    beforeUpdateData;\n    beforeValidate;\n    beforeValueRender;\n    beforeViewportScroll;\n    beforeViewportScrollHorizontally;\n    beforeViewportScrollVertically;\n    beforeViewRender;\n    construct;\n    init;\n    modifyAutoColumnSizeSeed;\n    modifyAutofillRange;\n    modifyColHeader;\n    modifyColumnHeaderHeight;\n    modifyColumnHeaderValue;\n    modifyColWidth;\n    modifyCopyableRange;\n    modifyFiltersMultiSelectValue;\n    modifyFocusedElement;\n    modifyData;\n    modifyFocusOnTabNavigation;\n    modifyGetCellCoords;\n    modifyRowData;\n    modifyRowHeader;\n    modifyRowHeaderWidth;\n    modifyRowHeight;\n    modifySourceData;\n    modifyTransformEnd;\n    modifyTransformFocus;\n    modifyTransformStart;\n    persistentStateLoad;\n    persistentStateReset;\n    persistentStateSave;\n    constructor(_hotTableRegisterer, _hotSettingsResolver, ngZone) {\n        this._hotTableRegisterer = _hotTableRegisterer;\n        this._hotSettingsResolver = _hotSettingsResolver;\n        this.ngZone = ngZone;\n    }\n    get hotInstance() {\n        if (!this.__hotInstance || (this.__hotInstance && !this.__hotInstance.isDestroyed)) {\n            // Will return the Handsontable instance or `null` if it's not yet been created.\n            return this.__hotInstance;\n        }\n        else {\n            this._hotTableRegisterer.removeInstance(this.hotId);\n            console.warn(HOT_DESTROYED_WARNING);\n            return null;\n        }\n    }\n    set hotInstance(hotInstance) {\n        this.__hotInstance = hotInstance;\n    }\n    ngAfterViewInit() {\n        const options = this._hotSettingsResolver.mergeSettings(this);\n        if (this.columnsComponents.length > 0) {\n            const columns = [];\n            this.columnsComponents.forEach((column) => {\n                columns.push(this._hotSettingsResolver.mergeSettings(column));\n            });\n            options['columns'] = columns;\n        }\n        this.ngZone.runOutsideAngular(() => {\n            this.hotInstance = new Handsontable.Core(this.container.nativeElement, options);\n            if (this.hotId) {\n                this._hotTableRegisterer.registerInstance(this.hotId, this.hotInstance);\n            }\n            // @ts-ignore\n            this.hotInstance.init();\n        });\n    }\n    ngOnChanges(changes) {\n        if (this.hotInstance === null) {\n            return;\n        }\n        const newOptions = this._hotSettingsResolver.prepareChanges(changes);\n        this.updateHotTable(newOptions);\n    }\n    ngOnDestroy() {\n        this.ngZone.runOutsideAngular(() => {\n            if (this.hotInstance) {\n                this.hotInstance.destroy();\n            }\n        });\n        if (this.hotId) {\n            this._hotTableRegisterer.removeInstance(this.hotId);\n        }\n    }\n    updateHotTable(newSettings) {\n        if (!this.hotInstance) {\n            return;\n        }\n        this.ngZone.runOutsideAngular(() => {\n            this.hotInstance.updateSettings(newSettings, false);\n        });\n    }\n    onAfterColumnsChange() {\n        if (this.columnsComponents === void 0) {\n            return;\n        }\n        if (this.columnsComponents.length > 0) {\n            const columns = [];\n            this.columnsComponents.forEach((column) => {\n                columns.push(this._hotSettingsResolver.mergeSettings(column));\n            });\n            const newOptions = {\n                columns: columns\n            };\n            this.updateHotTable(newOptions);\n        }\n    }\n    onAfterColumnsNumberChange() {\n        const columns = [];\n        if (this.columnsComponents.length > 0) {\n            this.columnsComponents.forEach((column) => {\n                columns.push(this._hotSettingsResolver.mergeSettings(column));\n            });\n        }\n        this.updateHotTable({ columns });\n    }\n    addColumn(column) {\n        this.columnsComponents.push(column);\n        this.onAfterColumnsNumberChange();\n    }\n    removeColumn(column) {\n        const index = this.columnsComponents.indexOf(column);\n        this.columnsComponents.splice(index, 1);\n        this.onAfterColumnsNumberChange();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotTableComponent, deps: [{ token: HotTableRegisterer }, { token: HotSettingsResolver }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.3.6\", type: HotTableComponent, selector: \"hot-table\", inputs: { settings: \"settings\", hotId: \"hotId\", activeHeaderClassName: \"activeHeaderClassName\", allowEmpty: \"allowEmpty\", allowHtml: \"allowHtml\", allowInsertColumn: \"allowInsertColumn\", allowInsertRow: \"allowInsertRow\", allowInvalid: \"allowInvalid\", allowRemoveColumn: \"allowRemoveColumn\", allowRemoveRow: \"allowRemoveRow\", ariaTags: \"ariaTags\", autoColumnSize: \"autoColumnSize\", autoRowSize: \"autoRowSize\", autoWrapCol: \"autoWrapCol\", autoWrapRow: \"autoWrapRow\", bindRowsWithHeaders: \"bindRowsWithHeaders\", cell: \"cell\", cells: \"cells\", checkedTemplate: \"checkedTemplate\", className: \"className\", colHeaders: \"colHeaders\", collapsibleColumns: \"collapsibleColumns\", columnHeaderHeight: \"columnHeaderHeight\", columns: \"columns\", columnSorting: \"columnSorting\", columnSummary: \"columnSummary\", colWidths: \"colWidths\", commentedCellClassName: \"commentedCellClassName\", comments: \"comments\", contextMenu: \"contextMenu\", copyable: \"copyable\", copyPaste: \"copyPaste\", correctFormat: \"correctFormat\", currentColClassName: \"currentColClassName\", currentHeaderClassName: \"currentHeaderClassName\", currentRowClassName: \"currentRowClassName\", customBorders: \"customBorders\", data: \"data\", dataSchema: \"dataSchema\", dateFormat: \"dateFormat\", datePickerConfig: \"datePickerConfig\", defaultDate: \"defaultDate\", tabNavigation: \"tabNavigation\", disableVisualSelection: \"disableVisualSelection\", dragToScroll: \"dragToScroll\", dropdownMenu: \"dropdownMenu\", editor: \"editor\", enterBeginsEditing: \"enterBeginsEditing\", enterMoves: \"enterMoves\", fillHandle: \"fillHandle\", filter: \"filter\", filteringCaseSensitive: \"filteringCaseSensitive\", filters: \"filters\", fixedColumnsLeft: \"fixedColumnsLeft\", fixedColumnsStart: \"fixedColumnsStart\", fixedRowsBottom: \"fixedRowsBottom\", fixedRowsTop: \"fixedRowsTop\", formulas: \"formulas\", fragmentSelection: \"fragmentSelection\", height: \"height\", hiddenColumns: \"hiddenColumns\", hiddenRows: \"hiddenRows\", invalidCellClassName: \"invalidCellClassName\", imeFastEdit: \"imeFastEdit\", label: \"label\", language: \"language\", layoutDirection: \"layoutDirection\", licenseKey: \"licenseKey\", locale: \"locale\", manualColumnFreeze: \"manualColumnFreeze\", manualColumnMove: \"manualColumnMove\", manualColumnResize: \"manualColumnResize\", manualRowMove: \"manualRowMove\", manualRowResize: \"manualRowResize\", maxCols: \"maxCols\", maxRows: \"maxRows\", mergeCells: \"mergeCells\", minCols: \"minCols\", minRows: \"minRows\", minSpareCols: \"minSpareCols\", minSpareRows: \"minSpareRows\", multiColumnSorting: \"multiColumnSorting\", navigableHeaders: \"navigableHeaders\", nestedHeaders: \"nestedHeaders\", nestedRows: \"nestedRows\", noWordWrapClassName: \"noWordWrapClassName\", numericFormat: \"numericFormat\", observeDOMVisibility: \"observeDOMVisibility\", outsideClickDeselects: \"outsideClickDeselects\", persistentState: \"persistentState\", placeholder: \"placeholder\", placeholderCellClassName: \"placeholderCellClassName\", preventOverflow: \"preventOverflow\", preventWheel: \"preventWheel\", readOnly: \"readOnly\", readOnlyCellClassName: \"readOnlyCellClassName\", renderAllColumns: \"renderAllColumns\", renderAllRows: \"renderAllRows\", renderer: \"renderer\", rowHeaders: \"rowHeaders\", rowHeaderWidth: \"rowHeaderWidth\", rowHeights: \"rowHeights\", search: \"search\", selectionMode: \"selectionMode\", selectOptions: \"selectOptions\", skipColumnOnPaste: \"skipColumnOnPaste\", skipRowOnPaste: \"skipRowOnPaste\", sortByRelevance: \"sortByRelevance\", source: \"source\", startCols: \"startCols\", startRows: \"startRows\", stretchH: \"stretchH\", strict: \"strict\", tableClassName: \"tableClassName\", tabMoves: \"tabMoves\", title: \"title\", trimDropdown: \"trimDropdown\", trimRows: \"trimRows\", trimWhitespace: \"trimWhitespace\", type: \"type\", uncheckedTemplate: \"uncheckedTemplate\", undo: \"undo\", validator: \"validator\", viewportColumnRenderingOffset: \"viewportColumnRenderingOffset\", viewportRowRenderingOffset: \"viewportRowRenderingOffset\", visibleRows: \"visibleRows\", width: \"width\", wordWrap: \"wordWrap\", afterAddChild: \"afterAddChild\", afterAutofill: \"afterAutofill\", afterBeginEditing: \"afterBeginEditing\", afterCellMetaReset: \"afterCellMetaReset\", afterChange: \"afterChange\", afterChangesObserved: \"afterChangesObserved\", afterColumnCollapse: \"afterColumnCollapse\", afterColumnExpand: \"afterColumnExpand\", afterColumnFreeze: \"afterColumnFreeze\", afterColumnMove: \"afterColumnMove\", afterColumnResize: \"afterColumnResize\", afterColumnSequenceChange: \"afterColumnSequenceChange\", afterColumnSort: \"afterColumnSort\", afterColumnUnfreeze: \"afterColumnUnfreeze\", afterContextMenuDefaultOptions: \"afterContextMenuDefaultOptions\", afterContextMenuHide: \"afterContextMenuHide\", afterContextMenuShow: \"afterContextMenuShow\", afterCopy: \"afterCopy\", afterCopyLimit: \"afterCopyLimit\", afterCreateCol: \"afterCreateCol\", afterCreateRow: \"afterCreateRow\", afterCut: \"afterCut\", afterDeselect: \"afterDeselect\", afterDestroy: \"afterDestroy\", afterDetachChild: \"afterDetachChild\", afterDocumentKeyDown: \"afterDocumentKeyDown\", afterDrawSelection: \"afterDrawSelection\", afterDropdownMenuDefaultOptions: \"afterDropdownMenuDefaultOptions\", afterDropdownMenuHide: \"afterDropdownMenuHide\", afterDropdownMenuShow: \"afterDropdownMenuShow\", afterFilter: \"afterFilter\", afterFormulasValuesUpdate: \"afterFormulasValuesUpdate\", afterGetCellMeta: \"afterGetCellMeta\", afterGetColHeader: \"afterGetColHeader\", afterGetColumnHeaderRenderers: \"afterGetColumnHeaderRenderers\", afterGetRowHeader: \"afterGetRowHeader\", afterGetRowHeaderRenderers: \"afterGetRowHeaderRenderers\", afterHideColumns: \"afterHideColumns\", afterHideRows: \"afterHideRows\", afterInit: \"afterInit\", afterLanguageChange: \"afterLanguageChange\", afterListen: \"afterListen\", afterLoadData: \"afterLoadData\", afterMergeCells: \"afterMergeCells\", afterModifyTransformEnd: \"afterModifyTransformEnd\", afterModifyTransformFocus: \"afterModifyTransformFocus\", afterModifyTransformStart: \"afterModifyTransformStart\", afterMomentumScroll: \"afterMomentumScroll\", afterNamedExpressionAdded: \"afterNamedExpressionAdded\", afterNamedExpressionRemoved: \"afterNamedExpressionRemoved\", afterOnCellContextMenu: \"afterOnCellContextMenu\", afterOnCellCornerDblClick: \"afterOnCellCornerDblClick\", afterOnCellCornerMouseDown: \"afterOnCellCornerMouseDown\", afterOnCellMouseDown: \"afterOnCellMouseDown\", afterOnCellMouseOut: \"afterOnCellMouseOut\", afterOnCellMouseOver: \"afterOnCellMouseOver\", afterOnCellMouseUp: \"afterOnCellMouseUp\", afterPaste: \"afterPaste\", afterPluginsInitialized: \"afterPluginsInitialized\", afterRedo: \"afterRedo\", afterRedoStackChange: \"afterRedoStackChange\", afterRefreshDimensions: \"afterRefreshDimensions\", afterRemoveCellMeta: \"afterRemoveCellMeta\", afterRemoveCol: \"afterRemoveCol\", afterRemoveRow: \"afterRemoveRow\", afterRender: \"afterRender\", afterRenderer: \"afterRenderer\", afterRowMove: \"afterRowMove\", afterRowResize: \"afterRowResize\", afterRowSequenceChange: \"afterRowSequenceChange\", afterScrollHorizontally: \"afterScrollHorizontally\", afterScrollVertically: \"afterScrollVertically\", afterScroll: \"afterScroll\", afterSelectColumns: \"afterSelectColumns\", afterSelection: \"afterSelection\", afterSelectionByProp: \"afterSelectionByProp\", afterSelectionEnd: \"afterSelectionEnd\", afterSelectionEndByProp: \"afterSelectionEndByProp\", afterSelectionFocusSet: \"afterSelectionFocusSet\", afterSelectRows: \"afterSelectRows\", afterSetCellMeta: \"afterSetCellMeta\", afterSetDataAtCell: \"afterSetDataAtCell\", afterSetDataAtRowProp: \"afterSetDataAtRowProp\", afterSetSourceDataAtCell: \"afterSetSourceDataAtCell\", afterSheetAdded: \"afterSheetAdded\", afterSheetRenamed: \"afterSheetRenamed\", afterSheetRemoved: \"afterSheetRemoved\", afterTrimRow: \"afterTrimRow\", afterUndo: \"afterUndo\", afterUndoStackChange: \"afterUndoStackChange\", afterUnhideColumns: \"afterUnhideColumns\", afterUnhideRows: \"afterUnhideRows\", afterUnlisten: \"afterUnlisten\", afterUnmergeCells: \"afterUnmergeCells\", afterUntrimRow: \"afterUntrimRow\", afterUpdateData: \"afterUpdateData\", afterUpdateSettings: \"afterUpdateSettings\", afterValidate: \"afterValidate\", afterViewportColumnCalculatorOverride: \"afterViewportColumnCalculatorOverride\", afterViewportRowCalculatorOverride: \"afterViewportRowCalculatorOverride\", afterViewRender: \"afterViewRender\", beforeAddChild: \"beforeAddChild\", beforeAutofill: \"beforeAutofill\", beforeBeginEditing: \"beforeBeginEditing\", beforeCellAlignment: \"beforeCellAlignment\", beforeChange: \"beforeChange\", beforeChangeRender: \"beforeChangeRender\", beforeColumnCollapse: \"beforeColumnCollapse\", beforeColumnExpand: \"beforeColumnExpand\", beforeColumnFreeze: \"beforeColumnFreeze\", beforeColumnMove: \"beforeColumnMove\", beforeColumnResize: \"beforeColumnResize\", beforeColumnSort: \"beforeColumnSort\", beforeColumnWrap: \"beforeColumnWrap\", beforeColumnUnfreeze: \"beforeColumnUnfreeze\", beforeContextMenuSetItems: \"beforeContextMenuSetItems\", beforeContextMenuShow: \"beforeContextMenuShow\", beforeCopy: \"beforeCopy\", beforeCreateCol: \"beforeCreateCol\", beforeCreateRow: \"beforeCreateRow\", beforeCut: \"beforeCut\", beforeDetachChild: \"beforeDetachChild\", beforeDrawBorders: \"beforeDrawBorders\", beforeDropdownMenuSetItems: \"beforeDropdownMenuSetItems\", beforeDropdownMenuShow: \"beforeDropdownMenuShow\", beforeFilter: \"beforeFilter\", beforeGetCellMeta: \"beforeGetCellMeta\", beforeHideColumns: \"beforeHideColumns\", beforeHideRows: \"beforeHideRows\", beforeHighlightingColumnHeader: \"beforeHighlightingColumnHeader\", beforeHighlightingRowHeader: \"beforeHighlightingRowHeader\", beforeInit: \"beforeInit\", beforeInitWalkontable: \"beforeInitWalkontable\", beforeKeyDown: \"beforeKeyDown\", beforeLanguageChange: \"beforeLanguageChange\", beforeLoadData: \"beforeLoadData\", beforeMergeCells: \"beforeMergeCells\", beforeOnCellContextMenu: \"beforeOnCellContextMenu\", beforeOnCellMouseDown: \"beforeOnCellMouseDown\", beforeOnCellMouseOut: \"beforeOnCellMouseOut\", beforeOnCellMouseOver: \"beforeOnCellMouseOver\", beforeOnCellMouseUp: \"beforeOnCellMouseUp\", beforePaste: \"beforePaste\", beforeRedo: \"beforeRedo\", beforeRedoStackChange: \"beforeRedoStackChange\", beforeRefreshDimensions: \"beforeRefreshDimensions\", beforeRemoveCellClassNames: \"beforeRemoveCellClassNames\", beforeRemoveCellMeta: \"beforeRemoveCellMeta\", beforeRemoveCol: \"beforeRemoveCol\", beforeRemoveRow: \"beforeRemoveRow\", beforeRender: \"beforeRender\", beforeRenderer: \"beforeRenderer\", beforeRowMove: \"beforeRowMove\", beforeRowResize: \"beforeRowResize\", beforeRowWrap: \"beforeRowWrap\", beforeSelectColumns: \"beforeSelectColumns\", beforeSelectionFocusSet: \"beforeSelectionFocusSet\", beforeSelectionHighlightSet: \"beforeSelectionHighlightSet\", beforeSelectRows: \"beforeSelectRows\", beforeSetCellMeta: \"beforeSetCellMeta\", beforeSetRangeEnd: \"beforeSetRangeEnd\", beforeSetRangeStart: \"beforeSetRangeStart\", beforeSetRangeStartOnly: \"beforeSetRangeStartOnly\", beforeStretchingColumnWidth: \"beforeStretchingColumnWidth\", beforeTouchScroll: \"beforeTouchScroll\", beforeTrimRow: \"beforeTrimRow\", beforeUndo: \"beforeUndo\", beforeUndoStackChange: \"beforeUndoStackChange\", beforeUnhideColumns: \"beforeUnhideColumns\", beforeUnhideRows: \"beforeUnhideRows\", beforeUnmergeCells: \"beforeUnmergeCells\", beforeUntrimRow: \"beforeUntrimRow\", beforeUpdateData: \"beforeUpdateData\", beforeValidate: \"beforeValidate\", beforeValueRender: \"beforeValueRender\", beforeViewportScroll: \"beforeViewportScroll\", beforeViewportScrollHorizontally: \"beforeViewportScrollHorizontally\", beforeViewportScrollVertically: \"beforeViewportScrollVertically\", beforeViewRender: \"beforeViewRender\", construct: \"construct\", init: \"init\", modifyAutoColumnSizeSeed: \"modifyAutoColumnSizeSeed\", modifyAutofillRange: \"modifyAutofillRange\", modifyColHeader: \"modifyColHeader\", modifyColumnHeaderHeight: \"modifyColumnHeaderHeight\", modifyColumnHeaderValue: \"modifyColumnHeaderValue\", modifyColWidth: \"modifyColWidth\", modifyCopyableRange: \"modifyCopyableRange\", modifyFiltersMultiSelectValue: \"modifyFiltersMultiSelectValue\", modifyFocusedElement: \"modifyFocusedElement\", modifyData: \"modifyData\", modifyFocusOnTabNavigation: \"modifyFocusOnTabNavigation\", modifyGetCellCoords: \"modifyGetCellCoords\", modifyRowData: \"modifyRowData\", modifyRowHeader: \"modifyRowHeader\", modifyRowHeaderWidth: \"modifyRowHeaderWidth\", modifyRowHeight: \"modifyRowHeight\", modifySourceData: \"modifySourceData\", modifyTransformEnd: \"modifyTransformEnd\", modifyTransformFocus: \"modifyTransformFocus\", modifyTransformStart: \"modifyTransformStart\", persistentStateLoad: \"persistentStateLoad\", persistentStateReset: \"persistentStateReset\", persistentStateSave: \"persistentStateSave\" }, providers: [HotTableRegisterer, HotSettingsResolver], viewQueries: [{ propertyName: \"container\", first: true, predicate: [\"container\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: '<div #container [id]=\"hotId\"></div>', isInline: true, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotTableComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'hot-table',\n                    template: '<div #container [id]=\"hotId\"></div>',\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [HotTableRegisterer, HotSettingsResolver],\n                }]\n        }], ctorParameters: () => [{ type: HotTableRegisterer }, { type: HotSettingsResolver }, { type: i0.NgZone }], propDecorators: { container: [{\n                type: ViewChild,\n                args: ['container', { static: false }]\n            }], settings: [{\n                type: Input\n            }], hotId: [{\n                type: Input\n            }], activeHeaderClassName: [{\n                type: Input\n            }], allowEmpty: [{\n                type: Input\n            }], allowHtml: [{\n                type: Input\n            }], allowInsertColumn: [{\n                type: Input\n            }], allowInsertRow: [{\n                type: Input\n            }], allowInvalid: [{\n                type: Input\n            }], allowRemoveColumn: [{\n                type: Input\n            }], allowRemoveRow: [{\n                type: Input\n            }], ariaTags: [{\n                type: Input\n            }], autoColumnSize: [{\n                type: Input\n            }], autoRowSize: [{\n                type: Input\n            }], autoWrapCol: [{\n                type: Input\n            }], autoWrapRow: [{\n                type: Input\n            }], bindRowsWithHeaders: [{\n                type: Input\n            }], cell: [{\n                type: Input\n            }], cells: [{\n                type: Input\n            }], checkedTemplate: [{\n                type: Input\n            }], className: [{\n                type: Input\n            }], colHeaders: [{\n                type: Input\n            }], collapsibleColumns: [{\n                type: Input\n            }], columnHeaderHeight: [{\n                type: Input\n            }], columns: [{\n                type: Input\n            }], columnSorting: [{\n                type: Input\n            }], columnSummary: [{\n                type: Input\n            }], colWidths: [{\n                type: Input\n            }], commentedCellClassName: [{\n                type: Input\n            }], comments: [{\n                type: Input\n            }], contextMenu: [{\n                type: Input\n            }], copyable: [{\n                type: Input\n            }], copyPaste: [{\n                type: Input\n            }], correctFormat: [{\n                type: Input\n            }], currentColClassName: [{\n                type: Input\n            }], currentHeaderClassName: [{\n                type: Input\n            }], currentRowClassName: [{\n                type: Input\n            }], customBorders: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], dataSchema: [{\n                type: Input\n            }], dateFormat: [{\n                type: Input\n            }], datePickerConfig: [{\n                type: Input\n            }], defaultDate: [{\n                type: Input\n            }], tabNavigation: [{\n                type: Input\n            }], disableVisualSelection: [{\n                type: Input\n            }], dragToScroll: [{\n                type: Input\n            }], dropdownMenu: [{\n                type: Input\n            }], editor: [{\n                type: Input\n            }], enterBeginsEditing: [{\n                type: Input\n            }], enterMoves: [{\n                type: Input\n            }], fillHandle: [{\n                type: Input\n            }], filter: [{\n                type: Input\n            }], filteringCaseSensitive: [{\n                type: Input\n            }], filters: [{\n                type: Input\n            }], fixedColumnsLeft: [{\n                type: Input\n            }], fixedColumnsStart: [{\n                type: Input\n            }], fixedRowsBottom: [{\n                type: Input\n            }], fixedRowsTop: [{\n                type: Input\n            }], formulas: [{\n                type: Input\n            }], fragmentSelection: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], hiddenColumns: [{\n                type: Input\n            }], hiddenRows: [{\n                type: Input\n            }], invalidCellClassName: [{\n                type: Input\n            }], imeFastEdit: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], language: [{\n                type: Input\n            }], layoutDirection: [{\n                type: Input\n            }], licenseKey: [{\n                type: Input\n            }], locale: [{\n                type: Input\n            }], manualColumnFreeze: [{\n                type: Input\n            }], manualColumnMove: [{\n                type: Input\n            }], manualColumnResize: [{\n                type: Input\n            }], manualRowMove: [{\n                type: Input\n            }], manualRowResize: [{\n                type: Input\n            }], maxCols: [{\n                type: Input\n            }], maxRows: [{\n                type: Input\n            }], mergeCells: [{\n                type: Input\n            }], minCols: [{\n                type: Input\n            }], minRows: [{\n                type: Input\n            }], minSpareCols: [{\n                type: Input\n            }], minSpareRows: [{\n                type: Input\n            }], multiColumnSorting: [{\n                type: Input\n            }], navigableHeaders: [{\n                type: Input\n            }], nestedHeaders: [{\n                type: Input\n            }], nestedRows: [{\n                type: Input\n            }], noWordWrapClassName: [{\n                type: Input\n            }], numericFormat: [{\n                type: Input\n            }], observeDOMVisibility: [{\n                type: Input\n            }], outsideClickDeselects: [{\n                type: Input\n            }], persistentState: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], placeholderCellClassName: [{\n                type: Input\n            }], preventOverflow: [{\n                type: Input\n            }], preventWheel: [{\n                type: Input\n            }], readOnly: [{\n                type: Input\n            }], readOnlyCellClassName: [{\n                type: Input\n            }], renderAllColumns: [{\n                type: Input\n            }], renderAllRows: [{\n                type: Input\n            }], renderer: [{\n                type: Input\n            }], rowHeaders: [{\n                type: Input\n            }], rowHeaderWidth: [{\n                type: Input\n            }], rowHeights: [{\n                type: Input\n            }], search: [{\n                type: Input\n            }], selectionMode: [{\n                type: Input\n            }], selectOptions: [{\n                type: Input\n            }], skipColumnOnPaste: [{\n                type: Input\n            }], skipRowOnPaste: [{\n                type: Input\n            }], sortByRelevance: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], startCols: [{\n                type: Input\n            }], startRows: [{\n                type: Input\n            }], stretchH: [{\n                type: Input\n            }], strict: [{\n                type: Input\n            }], tableClassName: [{\n                type: Input\n            }], tabMoves: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], trimDropdown: [{\n                type: Input\n            }], trimRows: [{\n                type: Input\n            }], trimWhitespace: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], uncheckedTemplate: [{\n                type: Input\n            }], undo: [{\n                type: Input\n            }], validator: [{\n                type: Input\n            }], viewportColumnRenderingOffset: [{\n                type: Input\n            }], viewportRowRenderingOffset: [{\n                type: Input\n            }], visibleRows: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], wordWrap: [{\n                type: Input\n            }], afterAddChild: [{\n                type: Input\n            }], afterAutofill: [{\n                type: Input\n            }], afterBeginEditing: [{\n                type: Input\n            }], afterCellMetaReset: [{\n                type: Input\n            }], afterChange: [{\n                type: Input\n            }], afterChangesObserved: [{\n                type: Input\n            }], afterColumnCollapse: [{\n                type: Input\n            }], afterColumnExpand: [{\n                type: Input\n            }], afterColumnFreeze: [{\n                type: Input\n            }], afterColumnMove: [{\n                type: Input\n            }], afterColumnResize: [{\n                type: Input\n            }], afterColumnSequenceChange: [{\n                type: Input\n            }], afterColumnSort: [{\n                type: Input\n            }], afterColumnUnfreeze: [{\n                type: Input\n            }], afterContextMenuDefaultOptions: [{\n                type: Input\n            }], afterContextMenuHide: [{\n                type: Input\n            }], afterContextMenuShow: [{\n                type: Input\n            }], afterCopy: [{\n                type: Input\n            }], afterCopyLimit: [{\n                type: Input\n            }], afterCreateCol: [{\n                type: Input\n            }], afterCreateRow: [{\n                type: Input\n            }], afterCut: [{\n                type: Input\n            }], afterDeselect: [{\n                type: Input\n            }], afterDestroy: [{\n                type: Input\n            }], afterDetachChild: [{\n                type: Input\n            }], afterDocumentKeyDown: [{\n                type: Input\n            }], afterDrawSelection: [{\n                type: Input\n            }], afterDropdownMenuDefaultOptions: [{\n                type: Input\n            }], afterDropdownMenuHide: [{\n                type: Input\n            }], afterDropdownMenuShow: [{\n                type: Input\n            }], afterFilter: [{\n                type: Input\n            }], afterFormulasValuesUpdate: [{\n                type: Input\n            }], afterGetCellMeta: [{\n                type: Input\n            }], afterGetColHeader: [{\n                type: Input\n            }], afterGetColumnHeaderRenderers: [{\n                type: Input\n            }], afterGetRowHeader: [{\n                type: Input\n            }], afterGetRowHeaderRenderers: [{\n                type: Input\n            }], afterHideColumns: [{\n                type: Input\n            }], afterHideRows: [{\n                type: Input\n            }], afterInit: [{\n                type: Input\n            }], afterLanguageChange: [{\n                type: Input\n            }], afterListen: [{\n                type: Input\n            }], afterLoadData: [{\n                type: Input\n            }], afterMergeCells: [{\n                type: Input\n            }], afterModifyTransformEnd: [{\n                type: Input\n            }], afterModifyTransformFocus: [{\n                type: Input\n            }], afterModifyTransformStart: [{\n                type: Input\n            }], afterMomentumScroll: [{\n                type: Input\n            }], afterNamedExpressionAdded: [{\n                type: Input\n            }], afterNamedExpressionRemoved: [{\n                type: Input\n            }], afterOnCellContextMenu: [{\n                type: Input\n            }], afterOnCellCornerDblClick: [{\n                type: Input\n            }], afterOnCellCornerMouseDown: [{\n                type: Input\n            }], afterOnCellMouseDown: [{\n                type: Input\n            }], afterOnCellMouseOut: [{\n                type: Input\n            }], afterOnCellMouseOver: [{\n                type: Input\n            }], afterOnCellMouseUp: [{\n                type: Input\n            }], afterPaste: [{\n                type: Input\n            }], afterPluginsInitialized: [{\n                type: Input\n            }], afterRedo: [{\n                type: Input\n            }], afterRedoStackChange: [{\n                type: Input\n            }], afterRefreshDimensions: [{\n                type: Input\n            }], afterRemoveCellMeta: [{\n                type: Input\n            }], afterRemoveCol: [{\n                type: Input\n            }], afterRemoveRow: [{\n                type: Input\n            }], afterRender: [{\n                type: Input\n            }], afterRenderer: [{\n                type: Input\n            }], afterRowMove: [{\n                type: Input\n            }], afterRowResize: [{\n                type: Input\n            }], afterRowSequenceChange: [{\n                type: Input\n            }], afterScrollHorizontally: [{\n                type: Input\n            }], afterScrollVertically: [{\n                type: Input\n            }], afterScroll: [{\n                type: Input\n            }], afterSelectColumns: [{\n                type: Input\n            }], afterSelection: [{\n                type: Input\n            }], afterSelectionByProp: [{\n                type: Input\n            }], afterSelectionEnd: [{\n                type: Input\n            }], afterSelectionEndByProp: [{\n                type: Input\n            }], afterSelectionFocusSet: [{\n                type: Input\n            }], afterSelectRows: [{\n                type: Input\n            }], afterSetCellMeta: [{\n                type: Input\n            }], afterSetDataAtCell: [{\n                type: Input\n            }], afterSetDataAtRowProp: [{\n                type: Input\n            }], afterSetSourceDataAtCell: [{\n                type: Input\n            }], afterSheetAdded: [{\n                type: Input\n            }], afterSheetRenamed: [{\n                type: Input\n            }], afterSheetRemoved: [{\n                type: Input\n            }], afterTrimRow: [{\n                type: Input\n            }], afterUndo: [{\n                type: Input\n            }], afterUndoStackChange: [{\n                type: Input\n            }], afterUnhideColumns: [{\n                type: Input\n            }], afterUnhideRows: [{\n                type: Input\n            }], afterUnlisten: [{\n                type: Input\n            }], afterUnmergeCells: [{\n                type: Input\n            }], afterUntrimRow: [{\n                type: Input\n            }], afterUpdateData: [{\n                type: Input\n            }], afterUpdateSettings: [{\n                type: Input\n            }], afterValidate: [{\n                type: Input\n            }], afterViewportColumnCalculatorOverride: [{\n                type: Input\n            }], afterViewportRowCalculatorOverride: [{\n                type: Input\n            }], afterViewRender: [{\n                type: Input\n            }], beforeAddChild: [{\n                type: Input\n            }], beforeAutofill: [{\n                type: Input\n            }], beforeBeginEditing: [{\n                type: Input\n            }], beforeCellAlignment: [{\n                type: Input\n            }], beforeChange: [{\n                type: Input\n            }], beforeChangeRender: [{\n                type: Input\n            }], beforeColumnCollapse: [{\n                type: Input\n            }], beforeColumnExpand: [{\n                type: Input\n            }], beforeColumnFreeze: [{\n                type: Input\n            }], beforeColumnMove: [{\n                type: Input\n            }], beforeColumnResize: [{\n                type: Input\n            }], beforeColumnSort: [{\n                type: Input\n            }], beforeColumnWrap: [{\n                type: Input\n            }], beforeColumnUnfreeze: [{\n                type: Input\n            }], beforeContextMenuSetItems: [{\n                type: Input\n            }], beforeContextMenuShow: [{\n                type: Input\n            }], beforeCopy: [{\n                type: Input\n            }], beforeCreateCol: [{\n                type: Input\n            }], beforeCreateRow: [{\n                type: Input\n            }], beforeCut: [{\n                type: Input\n            }], beforeDetachChild: [{\n                type: Input\n            }], beforeDrawBorders: [{\n                type: Input\n            }], beforeDropdownMenuSetItems: [{\n                type: Input\n            }], beforeDropdownMenuShow: [{\n                type: Input\n            }], beforeFilter: [{\n                type: Input\n            }], beforeGetCellMeta: [{\n                type: Input\n            }], beforeHideColumns: [{\n                type: Input\n            }], beforeHideRows: [{\n                type: Input\n            }], beforeHighlightingColumnHeader: [{\n                type: Input\n            }], beforeHighlightingRowHeader: [{\n                type: Input\n            }], beforeInit: [{\n                type: Input\n            }], beforeInitWalkontable: [{\n                type: Input\n            }], beforeKeyDown: [{\n                type: Input\n            }], beforeLanguageChange: [{\n                type: Input\n            }], beforeLoadData: [{\n                type: Input\n            }], beforeMergeCells: [{\n                type: Input\n            }], beforeOnCellContextMenu: [{\n                type: Input\n            }], beforeOnCellMouseDown: [{\n                type: Input\n            }], beforeOnCellMouseOut: [{\n                type: Input\n            }], beforeOnCellMouseOver: [{\n                type: Input\n            }], beforeOnCellMouseUp: [{\n                type: Input\n            }], beforePaste: [{\n                type: Input\n            }], beforeRedo: [{\n                type: Input\n            }], beforeRedoStackChange: [{\n                type: Input\n            }], beforeRefreshDimensions: [{\n                type: Input\n            }], beforeRemoveCellClassNames: [{\n                type: Input\n            }], beforeRemoveCellMeta: [{\n                type: Input\n            }], beforeRemoveCol: [{\n                type: Input\n            }], beforeRemoveRow: [{\n                type: Input\n            }], beforeRender: [{\n                type: Input\n            }], beforeRenderer: [{\n                type: Input\n            }], beforeRowMove: [{\n                type: Input\n            }], beforeRowResize: [{\n                type: Input\n            }], beforeRowWrap: [{\n                type: Input\n            }], beforeSelectColumns: [{\n                type: Input\n            }], beforeSelectionFocusSet: [{\n                type: Input\n            }], beforeSelectionHighlightSet: [{\n                type: Input\n            }], beforeSelectRows: [{\n                type: Input\n            }], beforeSetCellMeta: [{\n                type: Input\n            }], beforeSetRangeEnd: [{\n                type: Input\n            }], beforeSetRangeStart: [{\n                type: Input\n            }], beforeSetRangeStartOnly: [{\n                type: Input\n            }], beforeStretchingColumnWidth: [{\n                type: Input\n            }], beforeTouchScroll: [{\n                type: Input\n            }], beforeTrimRow: [{\n                type: Input\n            }], beforeUndo: [{\n                type: Input\n            }], beforeUndoStackChange: [{\n                type: Input\n            }], beforeUnhideColumns: [{\n                type: Input\n            }], beforeUnhideRows: [{\n                type: Input\n            }], beforeUnmergeCells: [{\n                type: Input\n            }], beforeUntrimRow: [{\n                type: Input\n            }], beforeUpdateData: [{\n                type: Input\n            }], beforeValidate: [{\n                type: Input\n            }], beforeValueRender: [{\n                type: Input\n            }], beforeViewportScroll: [{\n                type: Input\n            }], beforeViewportScrollHorizontally: [{\n                type: Input\n            }], beforeViewportScrollVertically: [{\n                type: Input\n            }], beforeViewRender: [{\n                type: Input\n            }], construct: [{\n                type: Input\n            }], init: [{\n                type: Input\n            }], modifyAutoColumnSizeSeed: [{\n                type: Input\n            }], modifyAutofillRange: [{\n                type: Input\n            }], modifyColHeader: [{\n                type: Input\n            }], modifyColumnHeaderHeight: [{\n                type: Input\n            }], modifyColumnHeaderValue: [{\n                type: Input\n            }], modifyColWidth: [{\n                type: Input\n            }], modifyCopyableRange: [{\n                type: Input\n            }], modifyFiltersMultiSelectValue: [{\n                type: Input\n            }], modifyFocusedElement: [{\n                type: Input\n            }], modifyData: [{\n                type: Input\n            }], modifyFocusOnTabNavigation: [{\n                type: Input\n            }], modifyGetCellCoords: [{\n                type: Input\n            }], modifyRowData: [{\n                type: Input\n            }], modifyRowHeader: [{\n                type: Input\n            }], modifyRowHeaderWidth: [{\n                type: Input\n            }], modifyRowHeight: [{\n                type: Input\n            }], modifySourceData: [{\n                type: Input\n            }], modifyTransformEnd: [{\n                type: Input\n            }], modifyTransformFocus: [{\n                type: Input\n            }], modifyTransformStart: [{\n                type: Input\n            }], persistentStateLoad: [{\n                type: Input\n            }], persistentStateReset: [{\n                type: Input\n            }], persistentStateSave: [{\n                type: Input\n            }] } });\n\nclass HotColumnComponent {\n    parentComponent;\n    firstRun = true;\n    // handsontable column options\n    allowEmpty;\n    allowHtml;\n    allowInvalid;\n    checkedTemplate;\n    className;\n    columnSorting;\n    colWidths;\n    commentedCellClassName;\n    copyable;\n    correctFormat;\n    data;\n    dateFormat;\n    defaultDate;\n    editor;\n    filteringCaseSensitive;\n    invalidCellClassName;\n    label;\n    language;\n    noWordWrapClassName;\n    numericFormat;\n    placeholder;\n    placeholderCellClassName;\n    readOnly;\n    readOnlyCellClassName;\n    renderer;\n    selectOptions;\n    skipColumnOnPaste;\n    sortByRelevance;\n    source;\n    strict;\n    title;\n    trimDropdown;\n    type;\n    uncheckedTemplate;\n    validator;\n    visibleRows;\n    width;\n    wordWrap;\n    constructor(parentComponent) {\n        this.parentComponent = parentComponent;\n    }\n    ngOnInit() {\n        this.firstRun = false;\n        this.parentComponent.addColumn(this);\n    }\n    ngOnChanges() {\n        if (this.firstRun) {\n            return;\n        }\n        this.parentComponent.onAfterColumnsChange();\n    }\n    ngOnDestroy() {\n        this.parentComponent.removeColumn(this);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotColumnComponent, deps: [{ token: HotTableComponent }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.3.6\", type: HotColumnComponent, selector: \"hot-column\", inputs: { allowEmpty: \"allowEmpty\", allowHtml: \"allowHtml\", allowInvalid: \"allowInvalid\", checkedTemplate: \"checkedTemplate\", className: \"className\", columnSorting: \"columnSorting\", colWidths: \"colWidths\", commentedCellClassName: \"commentedCellClassName\", copyable: \"copyable\", correctFormat: \"correctFormat\", data: \"data\", dateFormat: \"dateFormat\", defaultDate: \"defaultDate\", editor: \"editor\", filteringCaseSensitive: \"filteringCaseSensitive\", invalidCellClassName: \"invalidCellClassName\", label: \"label\", language: \"language\", noWordWrapClassName: \"noWordWrapClassName\", numericFormat: \"numericFormat\", placeholder: \"placeholder\", placeholderCellClassName: \"placeholderCellClassName\", readOnly: \"readOnly\", readOnlyCellClassName: \"readOnlyCellClassName\", renderer: \"renderer\", selectOptions: \"selectOptions\", skipColumnOnPaste: \"skipColumnOnPaste\", sortByRelevance: \"sortByRelevance\", source: \"source\", strict: \"strict\", title: \"title\", trimDropdown: \"trimDropdown\", type: \"type\", uncheckedTemplate: \"uncheckedTemplate\", validator: \"validator\", visibleRows: \"visibleRows\", width: \"width\", wordWrap: \"wordWrap\" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotColumnComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'hot-column',\n                    template: '',\n                }]\n        }], ctorParameters: () => [{ type: HotTableComponent }], propDecorators: { allowEmpty: [{\n                type: Input\n            }], allowHtml: [{\n                type: Input\n            }], allowInvalid: [{\n                type: Input\n            }], checkedTemplate: [{\n                type: Input\n            }], className: [{\n                type: Input\n            }], columnSorting: [{\n                type: Input\n            }], colWidths: [{\n                type: Input\n            }], commentedCellClassName: [{\n                type: Input\n            }], copyable: [{\n                type: Input\n            }], correctFormat: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], dateFormat: [{\n                type: Input\n            }], defaultDate: [{\n                type: Input\n            }], editor: [{\n                type: Input\n            }], filteringCaseSensitive: [{\n                type: Input\n            }], invalidCellClassName: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], language: [{\n                type: Input\n            }], noWordWrapClassName: [{\n                type: Input\n            }], numericFormat: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], placeholderCellClassName: [{\n                type: Input\n            }], readOnly: [{\n                type: Input\n            }], readOnlyCellClassName: [{\n                type: Input\n            }], renderer: [{\n                type: Input\n            }], selectOptions: [{\n                type: Input\n            }], skipColumnOnPaste: [{\n                type: Input\n            }], sortByRelevance: [{\n                type: Input\n            }], source: [{\n                type: Input\n            }], strict: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], trimDropdown: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], uncheckedTemplate: [{\n                type: Input\n            }], validator: [{\n                type: Input\n            }], visibleRows: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], wordWrap: [{\n                type: Input\n            }] } });\n\nclass HotTableModule {\n    static version = '14.3.0';\n    static forRoot() {\n        return {\n            ngModule: HotTableModule,\n            providers: [HotTableRegisterer],\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.3.6\", ngImport: i0, type: HotTableModule, declarations: [HotTableComponent,\n            HotColumnComponent], exports: [HotTableComponent,\n            HotColumnComponent] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotTableModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.6\", ngImport: i0, type: HotTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        HotTableComponent,\n                        HotColumnComponent,\n                    ],\n                    exports: [\n                        HotTableComponent,\n                        HotColumnComponent,\n                    ]\n                }]\n        }] });\n\n/*\n * Public API Surface of hot-table\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HOT_DESTROYED_WARNING, HotColumnComponent, HotSettingsResolver, HotTableComponent, HotTableModule, HotTableRegisterer };\n//# sourceMappingURL=handsontable-angular.mjs.map\n","map":null,"preliminaryFileName":"handsontable-angular.mjs","sourcemapFileName":"handsontable-angular.mjs.map"},{"fileName":"handsontable-angular.mjs.map","needsCodeReference":false,"source":"{\"version\":3,\"file\":\"handsontable-angular.mjs\",\"sources\":[\"../../../projects/hot-table/src/lib/hot-table-registerer.service.ts\",\"../../../projects/hot-table/src/lib/hot-settings-resolver.service.ts\",\"../../../projects/hot-table/src/lib/hot-table.component.ts\",\"../../../projects/hot-table/src/lib/hot-column.component.ts\",\"../../../projects/hot-table/src/lib/hot-table.module.ts\",\"../../../projects/hot-table/src/public-api.ts\",\"../../../projects/hot-table/src/handsontable-angular.ts\"],\"sourcesContent\":[\"import { Injectable } from '@angular/core';\\nimport Handsontable from 'handsontable/base';\\n\\nconst instances = new Map<string, Handsontable>();\\n\\nexport const HOT_DESTROYED_WARNING = 'The Handsontable instance bound to this component was destroyed and cannot be' +\\n  ' used properly.';\\n\\n@Injectable()\\nexport class HotTableRegisterer {\\n  public getInstance(id: string): Handsontable {\\n    const hotInstance = instances.get(id);\\n\\n    if (hotInstance.isDestroyed) {\\n      console.warn(HOT_DESTROYED_WARNING);\\n\\n      return null;\\n    }\\n\\n    return hotInstance;\\n  }\\n\\n  public registerInstance(id: string, instance: Handsontable): Map<string, Handsontable> {\\n    return instances.set(id, instance);\\n  }\\n\\n  public removeInstance(id: string): boolean {\\n    return instances.delete(id);\\n  }\\n}\\n\",\"import { Injectable, SimpleChanges } from '@angular/core';\\nimport { HotTableComponent } from './hot-table.component';\\nimport { HotColumnComponent } from './hot-column.component';\\nimport Handsontable from 'handsontable/base';\\n\\nconst AVAILABLE_OPTIONS: string[] = Object.keys(Handsontable.DefaultSettings);\\nconst AVAILABLE_HOOKS: string[] = Handsontable.hooks.getRegistered();\\n\\n@Injectable()\\nexport class HotSettingsResolver {\\n  mergeSettings(component: HotColumnComponent | HotTableComponent | Handsontable.GridSettings):\\n    Handsontable.GridSettings | Handsontable.ColumnSettings {\\n    const isSettingsObject = 'settings' in component && (typeof component['settings'] === 'object');\\n    const mergedSettings: Handsontable.GridSettings = isSettingsObject ? (component as HotTableComponent)['settings'] : {};\\n    const options = AVAILABLE_HOOKS.concat(AVAILABLE_OPTIONS);\\n\\n    options.forEach(key => {\\n      const isHook = AVAILABLE_HOOKS.indexOf(key) > -1;\\n      let option;\\n\\n      if (isSettingsObject && isHook) {\\n        option = component['settings'][key];\\n      }\\n\\n      if (component[key] !== void 0) {\\n        option = component[key];\\n      }\\n\\n      if (option === void 0) {\\n        return;\\n\\n      } else if (('ngZone' in component) && (typeof option === 'function' && isHook)) {\\n        mergedSettings[key] = function(...args: any) {\\n          return component.ngZone.run(() => option.apply(this, args));\\n        };\\n\\n      } else {\\n        mergedSettings[key] = option;\\n      }\\n    });\\n\\n    return mergedSettings;\\n  }\\n\\n  prepareChanges(changes: SimpleChanges): Handsontable.GridSettings {\\n    const result: Handsontable.GridSettings = {};\\n    const parameters: string[] = Object.keys(changes);\\n\\n    parameters.forEach((param) => {\\n      if (changes.hasOwnProperty(param)) {\\n        result[param] = changes[param].currentValue;\\n      }\\n    });\\n\\n    return result;\\n  }\\n}\\n\",\"import {\\n  AfterViewInit,\\n  Component,\\n  Input,\\n  NgZone,\\n  OnChanges,\\n  OnDestroy,\\n  SimpleChanges,\\n  ViewChild,\\n  ViewEncapsulation,\\n} from '@angular/core';\\nimport Handsontable from 'handsontable/base';\\nimport {\\n  HotTableRegisterer,\\n  HOT_DESTROYED_WARNING\\n} from './hot-table-registerer.service';\\nimport { HotSettingsResolver } from './hot-settings-resolver.service';\\nimport { HotColumnComponent } from './hot-column.component';\\n\\n@Component({\\n  selector: 'hot-table',\\n  template: '<div #container [id]=\\\"hotId\\\"></div>',\\n  encapsulation: ViewEncapsulation.None,\\n  providers: [ HotTableRegisterer, HotSettingsResolver ],\\n})\\nexport class HotTableComponent implements AfterViewInit, OnChanges, OnDestroy {\\n  @ViewChild('container', { static: false }) public container;\\n\\n  private __hotInstance: Handsontable | null = null;\\n  private columnsComponents: HotColumnComponent[] = [];\\n  // component inputs\\n  @Input() settings: Handsontable.GridSettings;\\n  @Input() hotId = '';\\n  // handsontable options\\n  @Input() activeHeaderClassName: Handsontable.GridSettings['activeHeaderClassName'];\\n  @Input() allowEmpty: Handsontable.GridSettings['allowEmpty'];\\n  @Input() allowHtml: Handsontable.GridSettings['allowHtml'];\\n  @Input() allowInsertColumn: Handsontable.GridSettings['allowInsertColumn'];\\n  @Input() allowInsertRow: Handsontable.GridSettings['allowInsertRow'];\\n  @Input() allowInvalid: Handsontable.GridSettings['allowInvalid'];\\n  @Input() allowRemoveColumn: Handsontable.GridSettings['allowRemoveColumn'];\\n  @Input() allowRemoveRow: Handsontable.GridSettings['allowRemoveRow'];\\n  @Input() ariaTags: Handsontable.GridSettings['ariaTags'];\\n  @Input() autoColumnSize: Handsontable.GridSettings['autoColumnSize'];\\n  @Input() autoRowSize: Handsontable.GridSettings['autoRowSize'];\\n  @Input() autoWrapCol: Handsontable.GridSettings['autoWrapCol'];\\n  @Input() autoWrapRow: Handsontable.GridSettings['autoWrapRow'];\\n  @Input() bindRowsWithHeaders: Handsontable.GridSettings['bindRowsWithHeaders'];\\n  @Input() cell: Handsontable.GridSettings['cell'];\\n  @Input() cells: Handsontable.GridSettings['cells'];\\n  @Input() checkedTemplate: Handsontable.GridSettings['checkedTemplate'];\\n  @Input() className: Handsontable.GridSettings['className'];\\n  @Input() colHeaders: Handsontable.GridSettings['colHeaders'];\\n  @Input() collapsibleColumns: Handsontable.GridSettings['collapsibleColumns'];\\n  @Input() columnHeaderHeight: Handsontable.GridSettings['columnHeaderHeight'];\\n  @Input() columns: Handsontable.GridSettings['columns'];\\n  @Input() columnSorting: Handsontable.GridSettings['columnSorting'];\\n  @Input() columnSummary: Handsontable.GridSettings['columnSummary'];\\n  @Input() colWidths: Handsontable.GridSettings['colWidths'];\\n  @Input() commentedCellClassName: Handsontable.GridSettings['commentedCellClassName'];\\n  @Input() comments: Handsontable.GridSettings['comments'];\\n  @Input() contextMenu: Handsontable.GridSettings['contextMenu'];\\n  @Input() copyable: Handsontable.GridSettings['copyable'];\\n  @Input() copyPaste: Handsontable.GridSettings['copyPaste'];\\n  @Input() correctFormat: Handsontable.GridSettings['correctFormat'];\\n  @Input() currentColClassName: Handsontable.GridSettings['currentColClassName'];\\n  @Input() currentHeaderClassName: Handsontable.GridSettings['currentHeaderClassName'];\\n  @Input() currentRowClassName: Handsontable.GridSettings['currentRowClassName'];\\n  @Input() customBorders: Handsontable.GridSettings['customBorders'];\\n  @Input() data: Handsontable.GridSettings['data'];\\n  @Input() dataSchema: Handsontable.GridSettings['dataSchema'];\\n  @Input() dateFormat: Handsontable.GridSettings['dateFormat'];\\n  @Input() datePickerConfig: Handsontable.GridSettings['datePickerConfig'];\\n  @Input() defaultDate: Handsontable.GridSettings['defaultDate'];\\n  @Input() tabNavigation: Handsontable.GridSettings['tabNavigation'];\\n  @Input() disableVisualSelection: Handsontable.GridSettings['disableVisualSelection'];\\n  @Input() dragToScroll: Handsontable.GridSettings['dragToScroll'];\\n  @Input() dropdownMenu: Handsontable.GridSettings['dropdownMenu'];\\n  @Input() editor: Handsontable.GridSettings['editor'];\\n  @Input() enterBeginsEditing: Handsontable.GridSettings['enterBeginsEditing'];\\n  @Input() enterMoves: Handsontable.GridSettings['enterMoves'];\\n  @Input() fillHandle: Handsontable.GridSettings['fillHandle'];\\n  @Input() filter: Handsontable.GridSettings['filter'];\\n  @Input() filteringCaseSensitive: Handsontable.GridSettings['filteringCaseSensitive'];\\n  @Input() filters: Handsontable.GridSettings['filters'];\\n  @Input() fixedColumnsLeft: Handsontable.GridSettings['fixedColumnsLeft'];\\n  @Input() fixedColumnsStart: Handsontable.GridSettings['fixedColumnsStart'];\\n  @Input() fixedRowsBottom: Handsontable.GridSettings['fixedRowsBottom'];\\n  @Input() fixedRowsTop: Handsontable.GridSettings['fixedRowsTop'];\\n  @Input() formulas: Handsontable.GridSettings['formulas'];\\n  @Input() fragmentSelection: Handsontable.GridSettings['fragmentSelection'];\\n  @Input() height: Handsontable.GridSettings['height'];\\n  @Input() hiddenColumns: Handsontable.GridSettings['hiddenColumns'];\\n  @Input() hiddenRows: Handsontable.GridSettings['hiddenRows'];\\n  @Input() invalidCellClassName: Handsontable.GridSettings['invalidCellClassName'];\\n  @Input() imeFastEdit: Handsontable.GridSettings['imeFastEdit'];\\n  @Input() label: Handsontable.GridSettings['label'];\\n  @Input() language: Handsontable.GridSettings['language'];\\n  @Input() layoutDirection: Handsontable.GridSettings['layoutDirection'];\\n  @Input() licenseKey: Handsontable.GridSettings['licenseKey'];\\n  @Input() locale: Handsontable.GridSettings['locale'];\\n  @Input() manualColumnFreeze: Handsontable.GridSettings['manualColumnFreeze'];\\n  @Input() manualColumnMove: Handsontable.GridSettings['manualColumnMove'];\\n  @Input() manualColumnResize: Handsontable.GridSettings['manualColumnResize'];\\n  @Input() manualRowMove: Handsontable.GridSettings['manualRowMove'];\\n  @Input() manualRowResize: Handsontable.GridSettings['manualRowResize'];\\n  @Input() maxCols: Handsontable.GridSettings['maxCols'];\\n  @Input() maxRows: Handsontable.GridSettings['maxRows'];\\n  @Input() mergeCells: Handsontable.GridSettings['mergeCells'];\\n  @Input() minCols: Handsontable.GridSettings['minCols'];\\n  @Input() minRows: Handsontable.GridSettings['minRows'];\\n  @Input() minSpareCols: Handsontable.GridSettings['minSpareCols'];\\n  @Input() minSpareRows: Handsontable.GridSettings['minSpareRows'];\\n  @Input() multiColumnSorting: Handsontable.GridSettings['multiColumnSorting'];\\n  @Input() navigableHeaders: Handsontable.GridSettings['navigableHeaders'];\\n  @Input() nestedHeaders: Handsontable.GridSettings['nestedHeaders'];\\n  @Input() nestedRows: Handsontable.GridSettings['nestedRows'];\\n  @Input() noWordWrapClassName: Handsontable.GridSettings['noWordWrapClassName'];\\n  @Input() numericFormat: Handsontable.GridSettings['numericFormat'];\\n  @Input() observeDOMVisibility: Handsontable.GridSettings['observeDOMVisibility'];\\n  @Input() outsideClickDeselects: Handsontable.GridSettings['outsideClickDeselects'];\\n  @Input() persistentState: Handsontable.GridSettings['persistentState'];\\n  @Input() placeholder: Handsontable.GridSettings['placeholder'];\\n  @Input() placeholderCellClassName: Handsontable.GridSettings['placeholderCellClassName'];\\n  @Input() preventOverflow: Handsontable.GridSettings['preventOverflow'];\\n  @Input() preventWheel: Handsontable.GridSettings['preventWheel'];\\n  @Input() readOnly: Handsontable.GridSettings['readOnly'];\\n  @Input() readOnlyCellClassName: Handsontable.GridSettings['readOnlyCellClassName'];\\n  @Input() renderAllColumns: Handsontable.GridSettings['renderAllColumns'];\\n  @Input() renderAllRows: Handsontable.GridSettings['renderAllRows'];\\n  @Input() renderer: Handsontable.GridSettings['renderer'];\\n  @Input() rowHeaders: Handsontable.GridSettings['rowHeaders'];\\n  @Input() rowHeaderWidth: Handsontable.GridSettings['rowHeaderWidth'];\\n  @Input() rowHeights: Handsontable.GridSettings['rowHeights'];\\n  @Input() search: Handsontable.GridSettings['search'];\\n  @Input() selectionMode: Handsontable.GridSettings['selectionMode'];\\n  @Input() selectOptions: Handsontable.GridSettings['selectOptions'];\\n  @Input() skipColumnOnPaste: Handsontable.GridSettings['skipColumnOnPaste'];\\n  @Input() skipRowOnPaste: any;\\n  @Input() sortByRelevance: Handsontable.GridSettings['sortByRelevance'];\\n  @Input() source: Handsontable.GridSettings['source'];\\n  @Input() startCols: Handsontable.GridSettings['startCols'];\\n  @Input() startRows: Handsontable.GridSettings['startRows'];\\n  @Input() stretchH: Handsontable.GridSettings['stretchH'];\\n  @Input() strict: Handsontable.GridSettings['strict'];\\n  @Input() tableClassName: Handsontable.GridSettings['tableClassName'];\\n  @Input() tabMoves: Handsontable.GridSettings['tabMoves'];\\n  @Input() title: Handsontable.GridSettings['title'];\\n  @Input() trimDropdown: Handsontable.GridSettings['trimDropdown'];\\n  @Input() trimRows: Handsontable.GridSettings['nestedRows'];\\n  @Input() trimWhitespace: Handsontable.GridSettings['trimWhitespace'];\\n  @Input() type: Handsontable.GridSettings['type'];\\n  @Input() uncheckedTemplate: Handsontable.GridSettings['uncheckedTemplate'];\\n  @Input() undo: Handsontable.GridSettings['undo'];\\n  @Input() validator: Handsontable.GridSettings['validator'];\\n  @Input() viewportColumnRenderingOffset: Handsontable.GridSettings['viewportColumnRenderingOffset'];\\n  @Input() viewportRowRenderingOffset: Handsontable.GridSettings['viewportRowRenderingOffset'];\\n  @Input() visibleRows: Handsontable.GridSettings['visibleRows'];\\n  @Input() width: Handsontable.GridSettings['width'];\\n  @Input() wordWrap: Handsontable.GridSettings['wordWrap'];\\n\\n  // handsontable hooks\\n  @Input() afterAddChild: Handsontable.GridSettings['afterAddChild'];\\n  @Input() afterAutofill: Handsontable.GridSettings['afterAutofill'];\\n  @Input() afterBeginEditing: Handsontable.GridSettings['afterBeginEditing'];\\n  @Input() afterCellMetaReset: Handsontable.GridSettings['afterCellMetaReset'];\\n  @Input() afterChange: Handsontable.GridSettings['afterChange'];\\n  @Input() afterChangesObserved: Handsontable.GridSettings['afterChangesObserved'];\\n  @Input() afterColumnCollapse: Handsontable.GridSettings['afterColumnCollapse'];\\n  @Input() afterColumnExpand: Handsontable.GridSettings['afterColumnExpand'];\\n  @Input() afterColumnFreeze: Handsontable.GridSettings['afterColumnFreeze'];\\n  @Input() afterColumnMove: Handsontable.GridSettings['afterColumnMove'];\\n  @Input() afterColumnResize: Handsontable.GridSettings['afterColumnResize'];\\n  @Input() afterColumnSequenceChange: Handsontable.GridSettings['afterColumnSequenceChange'];\\n  @Input() afterColumnSort: Handsontable.GridSettings['afterColumnSort'];\\n  @Input() afterColumnUnfreeze: Handsontable.GridSettings['afterColumnUnfreeze'];\\n  @Input() afterContextMenuDefaultOptions: Handsontable.GridSettings['afterContextMenuDefaultOptions'];\\n  @Input() afterContextMenuHide: Handsontable.GridSettings['afterContextMenuHide'];\\n  @Input() afterContextMenuShow: Handsontable.GridSettings['afterContextMenuShow'];\\n  @Input() afterCopy: Handsontable.GridSettings['afterCopy'];\\n  @Input() afterCopyLimit: Handsontable.GridSettings['afterCopyLimit'];\\n  @Input() afterCreateCol: Handsontable.GridSettings['afterCreateCol'];\\n  @Input() afterCreateRow: Handsontable.GridSettings['afterCreateRow'];\\n  @Input() afterCut: Handsontable.GridSettings['afterCut'];\\n  @Input() afterDeselect: Handsontable.GridSettings['afterDeselect'];\\n  @Input() afterDestroy: Handsontable.GridSettings['afterDestroy'];\\n  @Input() afterDetachChild: Handsontable.GridSettings['afterDetachChild'];\\n  @Input() afterDocumentKeyDown: Handsontable.GridSettings['afterDocumentKeyDown'];\\n  @Input() afterDrawSelection: Handsontable.GridSettings['afterDrawSelection'];\\n  @Input() afterDropdownMenuDefaultOptions: Handsontable.GridSettings['afterDropdownMenuDefaultOptions'];\\n  @Input() afterDropdownMenuHide: Handsontable.GridSettings['afterDropdownMenuHide'];\\n  @Input() afterDropdownMenuShow: Handsontable.GridSettings['afterDropdownMenuShow'];\\n  @Input() afterFilter: Handsontable.GridSettings['afterFilter'];\\n  @Input() afterFormulasValuesUpdate: Handsontable.GridSettings['afterFormulasValuesUpdate'];\\n  @Input() afterGetCellMeta: Handsontable.GridSettings['afterGetCellMeta'];\\n  @Input() afterGetColHeader: Handsontable.GridSettings['afterGetColHeader'];\\n  @Input() afterGetColumnHeaderRenderers: Handsontable.GridSettings['afterGetColumnHeaderRenderers'];\\n  @Input() afterGetRowHeader: Handsontable.GridSettings['afterGetRowHeader'];\\n  @Input() afterGetRowHeaderRenderers: Handsontable.GridSettings['afterGetRowHeaderRenderers'];\\n  @Input() afterHideColumns: Handsontable.GridSettings['afterHideColumns'];\\n  @Input() afterHideRows: Handsontable.GridSettings['afterHideRows'];\\n  @Input() afterInit: Handsontable.GridSettings['afterInit'];\\n  @Input() afterLanguageChange: Handsontable.GridSettings['afterLanguageChange'];\\n  @Input() afterListen: Handsontable.GridSettings['afterListen'];\\n  @Input() afterLoadData: Handsontable.GridSettings['afterLoadData'];\\n  @Input() afterMergeCells: Handsontable.GridSettings['afterMergeCells'];\\n  @Input() afterModifyTransformEnd: Handsontable.GridSettings['afterModifyTransformEnd'];\\n  @Input() afterModifyTransformFocus: Handsontable.GridSettings['afterModifyTransformFocus'];\\n  @Input() afterModifyTransformStart: Handsontable.GridSettings['afterModifyTransformStart'];\\n  @Input() afterMomentumScroll: Handsontable.GridSettings['afterMomentumScroll'];\\n  @Input() afterNamedExpressionAdded: Handsontable.GridSettings['afterNamedExpressionAdded'];\\n  @Input() afterNamedExpressionRemoved: Handsontable.GridSettings['afterNamedExpressionRemoved'];\\n  @Input() afterOnCellContextMenu: Handsontable.GridSettings['afterOnCellContextMenu'];\\n  @Input() afterOnCellCornerDblClick: Handsontable.GridSettings['afterOnCellCornerDblClick'];\\n  @Input() afterOnCellCornerMouseDown: Handsontable.GridSettings['afterOnCellCornerMouseDown'];\\n  @Input() afterOnCellMouseDown: Handsontable.GridSettings['afterOnCellMouseDown'];\\n  @Input() afterOnCellMouseOut: Handsontable.GridSettings['afterOnCellMouseOut'];\\n  @Input() afterOnCellMouseOver: Handsontable.GridSettings['afterOnCellMouseOver'];\\n  @Input() afterOnCellMouseUp: Handsontable.GridSettings['afterOnCellMouseUp'];\\n  @Input() afterPaste: Handsontable.GridSettings['afterPaste'];\\n  @Input() afterPluginsInitialized: Handsontable.GridSettings['afterPluginsInitialized'];\\n  @Input() afterRedo: Handsontable.GridSettings['afterRedo'];\\n  @Input() afterRedoStackChange: Handsontable.GridSettings['afterRedoStackChange'];\\n  @Input() afterRefreshDimensions: Handsontable.GridSettings['afterRefreshDimensions'];\\n  @Input() afterRemoveCellMeta: Handsontable.GridSettings['afterRemoveCellMeta'];\\n  @Input() afterRemoveCol: Handsontable.GridSettings['afterRemoveCol'];\\n  @Input() afterRemoveRow: Handsontable.GridSettings['afterRemoveRow'];\\n  @Input() afterRender: Handsontable.GridSettings['afterRender'];\\n  @Input() afterRenderer: Handsontable.GridSettings['afterRenderer'];\\n  @Input() afterRowMove: Handsontable.GridSettings['afterRowMove'];\\n  @Input() afterRowResize: Handsontable.GridSettings['afterRowResize'];\\n  @Input() afterRowSequenceChange: Handsontable.GridSettings['afterRowSequenceChange'];\\n  @Input() afterScrollHorizontally: Handsontable.GridSettings['afterScrollHorizontally'];\\n  @Input() afterScrollVertically: Handsontable.GridSettings['afterScrollVertically'];\\n  @Input() afterScroll: Handsontable.GridSettings['afterScroll'];\\n  @Input() afterSelectColumns: Handsontable.GridSettings['afterSelectColumns'];\\n  @Input() afterSelection: Handsontable.GridSettings['afterSelection'];\\n  @Input() afterSelectionByProp: Handsontable.GridSettings['afterSelectionByProp'];\\n  @Input() afterSelectionEnd: Handsontable.GridSettings['afterSelectionEnd'];\\n  @Input() afterSelectionEndByProp: Handsontable.GridSettings['afterSelectionEndByProp'];\\n  @Input() afterSelectionFocusSet: Handsontable.GridSettings['afterSelectionFocusSet'];\\n  @Input() afterSelectRows: Handsontable.GridSettings['afterSelectRows'];\\n  @Input() afterSetCellMeta: Handsontable.GridSettings['afterSetCellMeta'];\\n  @Input() afterSetDataAtCell: Handsontable.GridSettings['afterSetDataAtCell'];\\n  @Input() afterSetDataAtRowProp: Handsontable.GridSettings['afterSetDataAtRowProp'];\\n  @Input() afterSetSourceDataAtCell: Handsontable.GridSettings['afterSetSourceDataAtCell'];\\n  @Input() afterSheetAdded: Handsontable.GridSettings['afterSheetAdded'];\\n  @Input() afterSheetRenamed: Handsontable.GridSettings['afterSheetRenamed'];\\n  @Input() afterSheetRemoved: Handsontable.GridSettings['afterSheetRemoved'];\\n  @Input() afterTrimRow: Handsontable.GridSettings['afterTrimRow'];\\n  @Input() afterUndo: Handsontable.GridSettings['afterUndo'];\\n  @Input() afterUndoStackChange: Handsontable.GridSettings['afterUndoStackChange'];\\n  @Input() afterUnhideColumns: Handsontable.GridSettings['afterUnhideColumns'];\\n  @Input() afterUnhideRows: Handsontable.GridSettings['afterUnhideRows'];\\n  @Input() afterUnlisten: Handsontable.GridSettings['afterUnlisten'];\\n  @Input() afterUnmergeCells: Handsontable.GridSettings['afterUnmergeCells'];\\n  @Input() afterUntrimRow: Handsontable.GridSettings['afterUntrimRow'];\\n  @Input() afterUpdateData: Handsontable.GridSettings['afterUpdateData'];\\n  @Input() afterUpdateSettings: Handsontable.GridSettings['afterUpdateSettings'];\\n  @Input() afterValidate: Handsontable.GridSettings['afterValidate'];\\n  @Input() afterViewportColumnCalculatorOverride: Handsontable.GridSettings['afterViewportColumnCalculatorOverride'];\\n  @Input() afterViewportRowCalculatorOverride: Handsontable.GridSettings['afterViewportRowCalculatorOverride'];\\n  @Input() afterViewRender: Handsontable.GridSettings['afterViewRender'];\\n  @Input() beforeAddChild: Handsontable.GridSettings['beforeAddChild'];\\n  @Input() beforeAutofill: Handsontable.GridSettings['beforeAutofill'];\\n  @Input() beforeBeginEditing: Handsontable.GridSettings['beforeBeginEditing'];\\n  @Input() beforeCellAlignment: Handsontable.GridSettings['beforeCellAlignment'];\\n  @Input() beforeChange: Handsontable.GridSettings['beforeChange'];\\n  @Input() beforeChangeRender: Handsontable.GridSettings['beforeChangeRender'];\\n  @Input() beforeColumnCollapse: Handsontable.GridSettings['beforeColumnCollapse'];\\n  @Input() beforeColumnExpand: Handsontable.GridSettings['beforeColumnExpand'];\\n  @Input() beforeColumnFreeze: Handsontable.GridSettings['beforeColumnFreeze'];\\n  @Input() beforeColumnMove: Handsontable.GridSettings['beforeColumnMove'];\\n  @Input() beforeColumnResize: Handsontable.GridSettings['beforeColumnResize'];\\n  @Input() beforeColumnSort: Handsontable.GridSettings['beforeColumnSort'];\\n  @Input() beforeColumnWrap: Handsontable.GridSettings['beforeColumnWrap'];\\n  @Input() beforeColumnUnfreeze: Handsontable.GridSettings['beforeColumnUnfreeze'];\\n  @Input() beforeContextMenuSetItems: Handsontable.GridSettings['beforeContextMenuSetItems'];\\n  @Input() beforeContextMenuShow: Handsontable.GridSettings['beforeContextMenuShow'];\\n  @Input() beforeCopy: Handsontable.GridSettings['beforeCopy'];\\n  @Input() beforeCreateCol: Handsontable.GridSettings['beforeCreateCol'];\\n  @Input() beforeCreateRow: Handsontable.GridSettings['beforeCreateRow'];\\n  @Input() beforeCut: Handsontable.GridSettings['beforeCut'];\\n  @Input() beforeDetachChild: Handsontable.GridSettings['beforeDetachChild'];\\n  @Input() beforeDrawBorders: Handsontable.GridSettings['beforeDrawBorders'];\\n  @Input() beforeDropdownMenuSetItems: Handsontable.GridSettings['beforeDropdownMenuSetItems'];\\n  @Input() beforeDropdownMenuShow: Handsontable.GridSettings['beforeDropdownMenuShow'];\\n  @Input() beforeFilter: Handsontable.GridSettings['beforeFilter'];\\n  @Input() beforeGetCellMeta: Handsontable.GridSettings['beforeGetCellMeta'];\\n  @Input() beforeHideColumns: Handsontable.GridSettings['beforeHideColumns'];\\n  @Input() beforeHideRows: Handsontable.GridSettings['beforeHideRows'];\\n  @Input() beforeHighlightingColumnHeader: Handsontable.GridSettings['beforeHighlightingColumnHeader'];\\n  @Input() beforeHighlightingRowHeader: Handsontable.GridSettings['beforeHighlightingRowHeader'];\\n  @Input() beforeInit: Handsontable.GridSettings['beforeInit'];\\n  @Input() beforeInitWalkontable: Handsontable.GridSettings['beforeInitWalkontable'];\\n  @Input() beforeKeyDown: Handsontable.GridSettings['beforeKeyDown'];\\n  @Input() beforeLanguageChange: Handsontable.GridSettings['beforeLanguageChange'];\\n  @Input() beforeLoadData: Handsontable.GridSettings['beforeLoadData'];\\n  @Input() beforeMergeCells: Handsontable.GridSettings['beforeMergeCells'];\\n  @Input() beforeOnCellContextMenu: Handsontable.GridSettings['beforeOnCellContextMenu'];\\n  @Input() beforeOnCellMouseDown: Handsontable.GridSettings['beforeOnCellMouseDown'];\\n  @Input() beforeOnCellMouseOut: Handsontable.GridSettings['beforeOnCellMouseOut'];\\n  @Input() beforeOnCellMouseOver: Handsontable.GridSettings['beforeOnCellMouseOver'];\\n  @Input() beforeOnCellMouseUp: Handsontable.GridSettings['beforeOnCellMouseUp'];\\n  @Input() beforePaste: Handsontable.GridSettings['beforePaste'];\\n  @Input() beforeRedo: Handsontable.GridSettings['beforeRedo'];\\n  @Input() beforeRedoStackChange: Handsontable.GridSettings['beforeRedoStackChange'];\\n  @Input() beforeRefreshDimensions: Handsontable.GridSettings['beforeRefreshDimensions'];\\n  @Input() beforeRemoveCellClassNames: Handsontable.GridSettings['beforeRemoveCellClassNames'];\\n  @Input() beforeRemoveCellMeta: Handsontable.GridSettings['beforeRemoveCellMeta'];\\n  @Input() beforeRemoveCol: Handsontable.GridSettings['beforeRemoveCol'];\\n  @Input() beforeRemoveRow: Handsontable.GridSettings['beforeRemoveRow'];\\n  @Input() beforeRender: Handsontable.GridSettings['beforeRender'];\\n  @Input() beforeRenderer: Handsontable.GridSettings['beforeRenderer'];\\n  @Input() beforeRowMove: Handsontable.GridSettings['beforeRowMove'];\\n  @Input() beforeRowResize: Handsontable.GridSettings['beforeRowResize'];\\n  @Input() beforeRowWrap: Handsontable.GridSettings['beforeRowWrap'];\\n  @Input() beforeSelectColumns: Handsontable.GridSettings['beforeSelectColumns'];\\n  @Input() beforeSelectionFocusSet: Handsontable.GridSettings['beforeSelectionFocusSet'];\\n  @Input() beforeSelectionHighlightSet: Handsontable.GridSettings['beforeSelectionHighlightSet'];\\n  @Input() beforeSelectRows: Handsontable.GridSettings['beforeSelectRows'];\\n  @Input() beforeSetCellMeta: Handsontable.GridSettings['beforeSetCellMeta'];\\n  @Input() beforeSetRangeEnd: Handsontable.GridSettings['beforeSetRangeEnd'];\\n  @Input() beforeSetRangeStart: Handsontable.GridSettings['beforeSetRangeStart'];\\n  @Input() beforeSetRangeStartOnly: Handsontable.GridSettings['beforeSetRangeStartOnly'];\\n  @Input() beforeStretchingColumnWidth: Handsontable.GridSettings['beforeStretchingColumnWidth'];\\n  @Input() beforeTouchScroll: Handsontable.GridSettings['beforeTouchScroll'];\\n  @Input() beforeTrimRow: Handsontable.GridSettings['beforeTrimRow'];\\n  @Input() beforeUndo: Handsontable.GridSettings['beforeUndo'];\\n  @Input() beforeUndoStackChange: Handsontable.GridSettings['beforeUndoStackChange'];\\n  @Input() beforeUnhideColumns: Handsontable.GridSettings['beforeUnhideColumns'];\\n  @Input() beforeUnhideRows: Handsontable.GridSettings['beforeUnhideRows'];\\n  @Input() beforeUnmergeCells: Handsontable.GridSettings['beforeUnmergeCells'];\\n  @Input() beforeUntrimRow: Handsontable.GridSettings['beforeUntrimRow'];\\n  @Input() beforeUpdateData: Handsontable.GridSettings['beforeUpdateData'];\\n  @Input() beforeValidate: Handsontable.GridSettings['beforeValidate'];\\n  @Input() beforeValueRender: Handsontable.GridSettings['beforeValueRender'];\\n  @Input() beforeViewportScroll: Handsontable.GridSettings['beforeViewportScroll'];\\n  @Input() beforeViewportScrollHorizontally: Handsontable.GridSettings['beforeViewportScrollHorizontally'];\\n  @Input() beforeViewportScrollVertically: Handsontable.GridSettings['beforeViewportScrollVertically'];\\n  @Input() beforeViewRender: Handsontable.GridSettings['beforeViewRender'];\\n  @Input() construct: Handsontable.GridSettings['construct'];\\n  @Input() init: Handsontable.GridSettings['init'];\\n  @Input() modifyAutoColumnSizeSeed: Handsontable.GridSettings['modifyAutoColumnSizeSeed'];\\n  @Input() modifyAutofillRange: Handsontable.GridSettings['modifyAutofillRange'];\\n  @Input() modifyColHeader: Handsontable.GridSettings['modifyColHeader'];\\n  @Input() modifyColumnHeaderHeight: Handsontable.GridSettings['modifyColumnHeaderHeight'];\\n  @Input() modifyColumnHeaderValue: Handsontable.GridSettings['modifyColumnHeaderValue'];\\n  @Input() modifyColWidth: Handsontable.GridSettings['modifyColWidth'];\\n  @Input() modifyCopyableRange: Handsontable.GridSettings['modifyCopyableRange'];\\n  @Input() modifyFiltersMultiSelectValue: Handsontable.GridSettings['modifyFiltersMultiSelectValue'];\\n  @Input() modifyFocusedElement: Handsontable.GridSettings['modifyFocusedElement'];\\n  @Input() modifyData: Handsontable.GridSettings['modifyData'];\\n  @Input() modifyFocusOnTabNavigation: Handsontable.GridSettings['modifyFocusOnTabNavigation'];\\n  @Input() modifyGetCellCoords: Handsontable.GridSettings['modifyGetCellCoords'];\\n  @Input() modifyRowData: Handsontable.GridSettings['modifyRowData'];\\n  @Input() modifyRowHeader: Handsontable.GridSettings['modifyRowHeader'];\\n  @Input() modifyRowHeaderWidth: Handsontable.GridSettings['modifyRowHeaderWidth'];\\n  @Input() modifyRowHeight: Handsontable.GridSettings['modifyRowHeight'];\\n  @Input() modifySourceData: Handsontable.GridSettings['modifySourceData'];\\n  @Input() modifyTransformEnd: Handsontable.GridSettings['modifyTransformEnd'];\\n  @Input() modifyTransformFocus: Handsontable.GridSettings['modifyTransformFocus'];\\n  @Input() modifyTransformStart: Handsontable.GridSettings['modifyTransformStart'];\\n  @Input() persistentStateLoad: Handsontable.GridSettings['persistentStateLoad'];\\n  @Input() persistentStateReset: Handsontable.GridSettings['persistentStateReset'];\\n  @Input() persistentStateSave: Handsontable.GridSettings['persistentStateSave'];\\n\\n  constructor(\\n    private _hotTableRegisterer: HotTableRegisterer,\\n    private _hotSettingsResolver: HotSettingsResolver,\\n    public ngZone: NgZone,\\n  ) {}\\n\\n  private get hotInstance(): Handsontable | null {\\n    if (!this.__hotInstance || (this.__hotInstance && !this.__hotInstance.isDestroyed)) {\\n\\n      // Will return the Handsontable instance or `null` if it's not yet been created.\\n      return this.__hotInstance;\\n\\n    } else {\\n      this._hotTableRegisterer.removeInstance(this.hotId);\\n\\n      console.warn(HOT_DESTROYED_WARNING);\\n\\n      return null;\\n    }\\n  }\\n\\n  private set hotInstance(hotInstance) {\\n    this.__hotInstance = hotInstance;\\n  }\\n\\n  ngAfterViewInit(): void {\\n    const options: Handsontable.GridSettings = (this._hotSettingsResolver.mergeSettings(this) as Handsontable.GridSettings);\\n\\n    if (this.columnsComponents.length > 0) {\\n      const columns: Handsontable.ColumnSettings[] = [];\\n\\n      this.columnsComponents.forEach((column) => {\\n        columns.push((this._hotSettingsResolver.mergeSettings(column) as Handsontable.ColumnSettings));\\n      });\\n\\n      options['columns'] = columns;\\n    }\\n\\n    this.ngZone.runOutsideAngular(() => {\\n      this.hotInstance = new Handsontable.Core(this.container.nativeElement, options);\\n\\n      if (this.hotId) {\\n        this._hotTableRegisterer.registerInstance(this.hotId, this.hotInstance);\\n      }\\n      // @ts-ignore\\n      this.hotInstance.init();\\n    });\\n  }\\n\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (this.hotInstance === null) {\\n      return;\\n    }\\n\\n    const newOptions: Handsontable.GridSettings = this._hotSettingsResolver.prepareChanges(changes);\\n\\n    this.updateHotTable(newOptions);\\n  }\\n\\n  ngOnDestroy(): void {\\n    this.ngZone.runOutsideAngular(() => {\\n      if (this.hotInstance) {\\n        this.hotInstance.destroy();\\n      }\\n    });\\n\\n    if (this.hotId) {\\n      this._hotTableRegisterer.removeInstance(this.hotId);\\n    }\\n  }\\n\\n  updateHotTable(newSettings: Handsontable.GridSettings ): void {\\n    if (!this.hotInstance) {\\n      return;\\n    }\\n\\n    this.ngZone.runOutsideAngular(() => {\\n      this.hotInstance.updateSettings(newSettings, false);\\n    });\\n  }\\n\\n  onAfterColumnsChange(): void {\\n    if (this.columnsComponents === void 0) {\\n      return;\\n    }\\n\\n    if (this.columnsComponents.length > 0) {\\n      const columns: Handsontable.ColumnSettings[] = [];\\n\\n      this.columnsComponents.forEach((column) => {\\n        columns.push((this._hotSettingsResolver.mergeSettings(column) as Handsontable.ColumnSettings));\\n      });\\n\\n      const newOptions: Handsontable.GridSettings = {\\n        columns: columns\\n      };\\n\\n      this.updateHotTable(newOptions);\\n    }\\n  }\\n\\n  onAfterColumnsNumberChange(): void {\\n    const columns: Handsontable.ColumnSettings[] = [];\\n\\n    if (this.columnsComponents.length > 0) {\\n      this.columnsComponents.forEach((column) => {\\n        columns.push((this._hotSettingsResolver.mergeSettings(column) as Handsontable.ColumnSettings));\\n      });\\n    }\\n\\n    this.updateHotTable({ columns });\\n  }\\n\\n  addColumn(column: HotColumnComponent): void {\\n    this.columnsComponents.push(column);\\n    this.onAfterColumnsNumberChange();\\n  }\\n\\n  removeColumn(column: HotColumnComponent): void {\\n    const index: number = this.columnsComponents.indexOf(column);\\n\\n    this.columnsComponents.splice(index, 1);\\n    this.onAfterColumnsNumberChange();\\n  }\\n\\n}\\n\",\"import {\\n  Component,\\n  OnInit,\\n  OnChanges,\\n  OnDestroy,\\n  Input,\\n} from '@angular/core';\\nimport { HotTableComponent } from './hot-table.component';\\nimport Handsontable from 'handsontable/base';\\n\\n@Component({\\n  selector: 'hot-column',\\n  template: '',\\n})\\nexport class HotColumnComponent implements OnInit, OnChanges, OnDestroy {\\n  private firstRun = true;\\n  // handsontable column options\\n  @Input() allowEmpty: Handsontable.ColumnSettings['allowEmpty'];\\n  @Input() allowHtml: Handsontable.ColumnSettings['allowHtml'];\\n  @Input() allowInvalid: Handsontable.ColumnSettings['allowInvalid'];\\n  @Input() checkedTemplate: Handsontable.ColumnSettings['checkedTemplate'];\\n  @Input() className: Handsontable.ColumnSettings['className'];\\n  @Input() columnSorting: Handsontable.ColumnSettings['columnSorting'];\\n  @Input() colWidths: Handsontable.ColumnSettings['colWidths'];\\n  @Input() commentedCellClassName: Handsontable.ColumnSettings['commentedCellClassName'];\\n  @Input() copyable: Handsontable.ColumnSettings['copyable'];\\n  @Input() correctFormat: Handsontable.ColumnSettings['correctFormat'];\\n  @Input() data: Handsontable.ColumnSettings['data'];\\n  @Input() dateFormat: Handsontable.ColumnSettings['dateFormat'];\\n  @Input() defaultDate: Handsontable.ColumnSettings['defaultDate'];\\n  @Input() editor: Handsontable.ColumnSettings['editor'];\\n  @Input() filteringCaseSensitive: Handsontable.ColumnSettings['filteringCaseSensitive'];\\n  @Input() invalidCellClassName: Handsontable.ColumnSettings['invalidCellClassName'];\\n  @Input() label: Handsontable.ColumnSettings['label'];\\n  @Input() language: Handsontable.ColumnSettings['language'];\\n  @Input() noWordWrapClassName: Handsontable.ColumnSettings['noWordWrapClassName'];\\n  @Input() numericFormat: Handsontable.ColumnSettings['numericFormat'];\\n  @Input() placeholder: Handsontable.ColumnSettings['placeholder'];\\n  @Input() placeholderCellClassName: Handsontable.ColumnSettings['placeholderCellClassName'];\\n  @Input() readOnly: Handsontable.ColumnSettings['readOnly'];\\n  @Input() readOnlyCellClassName: Handsontable.ColumnSettings['readOnlyCellClassName'];\\n  @Input() renderer: Handsontable.ColumnSettings['renderer'];\\n  @Input() selectOptions: Handsontable.ColumnSettings['selectOptions'];\\n  @Input() skipColumnOnPaste: Handsontable.ColumnSettings['skipColumnOnPaste'];\\n  @Input() sortByRelevance: Handsontable.ColumnSettings['sortByRelevance'];\\n  @Input() source: Handsontable.ColumnSettings['source'];\\n  @Input() strict: Handsontable.ColumnSettings['strict'];\\n  @Input() title: Handsontable.ColumnSettings['title'];\\n  @Input() trimDropdown: Handsontable.ColumnSettings['trimDropdown'];\\n  @Input() type: Handsontable.ColumnSettings['type'];\\n  @Input() uncheckedTemplate: Handsontable.ColumnSettings['uncheckedTemplate'];\\n  @Input() validator: Handsontable.ColumnSettings['validator'];\\n  @Input() visibleRows: Handsontable.ColumnSettings['visibleRows'];\\n  @Input() width: Handsontable.ColumnSettings['width'];\\n  @Input() wordWrap: Handsontable.ColumnSettings['wordWrap'];\\n\\n  constructor(private parentComponent: HotTableComponent) {}\\n\\n  ngOnInit(): void {\\n    this.firstRun = false;\\n    this.parentComponent.addColumn(this);\\n  }\\n\\n  ngOnChanges(): void {\\n    if (this.firstRun) {\\n      return;\\n    }\\n\\n    this.parentComponent.onAfterColumnsChange();\\n  }\\n\\n  ngOnDestroy(): void {\\n    this.parentComponent.removeColumn(this);\\n  }\\n}\\n\",\"import { NgModule, ModuleWithProviders } from '@angular/core';\\nimport { HotTableComponent } from './hot-table.component';\\nimport { HotColumnComponent } from './hot-column.component';\\nimport { HotTableRegisterer } from './hot-table-registerer.service';\\n\\n@NgModule({\\n  declarations: [\\n    HotTableComponent,\\n    HotColumnComponent,\\n  ],\\n  exports: [\\n    HotTableComponent,\\n    HotColumnComponent,\\n  ]\\n})\\nexport class HotTableModule {\\n  static version = '14.3.0';\\n\\n  public static forRoot(): ModuleWithProviders<HotTableModule> {\\n    return {\\n      ngModule: HotTableModule,\\n      providers: [ HotTableRegisterer ],\\n    };\\n  }\\n}\\n\",\"/*\\n * Public API Surface of hot-table\\n */\\n\\nexport * from './lib/hot-table.component';\\nexport * from './lib/hot-column.component';\\nexport * from './lib/hot-table-registerer.service';\\nexport * from './lib/hot-settings-resolver.service';\\nexport * from './lib/hot-table.module';\\n\",\"/**\\n * Generated bundle index. Do not edit.\\n */\\n\\nexport * from './public-api';\\n\"],\"names\":[\"i1.HotTableRegisterer\",\"i2.HotSettingsResolver\",\"i1.HotTableComponent\"],\"mappings\":\"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\"}","type":"asset"}]}